
AVRASM ver. 2.1.30  C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm Sat Nov 02 21:29:06 2019

C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _value=R4
                 	.DEF _value_msb=R5
                 	.DEF _limit0=R6
                 	.DEF _limit0_msb=R7
                 	.DEF _limit1=R8
                 	.DEF _limit1_msb=R9
                 	.DEF _limit2=R10
                 	.DEF _limit2_msb=R11
                 	.DEF _mode=R12
                 	.DEF _mode_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0082 	JMP  __RESET
000002 940c 00d2 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 019a
00002b 019a      	.DB  0x9A,0x1,0x9A,0x1
00002c 019a
00002d 0000      	.DB  0x9A,0x1,0x0,0x0
                 
                 _0x9:
00002e ffff      	.DB  0xFF,0xFF
                 _0x0:
00002f 4441
000030 2043
000031 6176
000032 756c      	.DB  0x41,0x44,0x43,0x20,0x76,0x61,0x6C,0x75
000033 0065
000034 2020
000035 2020
000036 434c      	.DB  0x65,0x0,0x20,0x20,0x20,0x20,0x4C,0x43
000037 2044
000038 4554
000039 5453
00003a 2020      	.DB  0x44,0x20,0x54,0x45,0x53,0x54,0x20,0x20
00003b 2020
00003c 2000
00003d 3c3c
00003e 3c3c      	.DB  0x20,0x20,0x0,0x20,0x3C,0x3C,0x3C,0x3C
00003f 4420
000040 4e4f
000041 2045
000042 3e3e      	.DB  0x20,0x44,0x4F,0x4E,0x45,0x20,0x3E,0x3E
000043 3e3e
000044 0020
000045 2020
000046 2020      	.DB  0x3E,0x3E,0x20,0x0,0x20,0x20,0x20,0x20
000047 2020
000048 2020
000049 2020
00004a 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00004b 2020
00004c 2020
00004d 2000
00004e 4320      	.DB  0x20,0x20,0x20,0x20,0x0,0x20,0x20,0x43
00004f 6c61
000050 6269
000051 6172
000052 6974      	.DB  0x61,0x6C,0x69,0x62,0x72,0x61,0x74,0x69
000053 676e
000054 2020
000055 0020      	.DB  0x6E,0x67,0x20,0x20,0x20,0x0
                 _0x2000060:
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1147): warning: .cseg .db misalignment - padding zero byte
000056 0001      	.DB  0x1
                 _0x2000000:
000057 4e2d
000058 4e41
000059 4900
00005a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\dev\workspace\proteus\EDU\micro processor lab\HW4 - Sensor\HW4 - Sensor - v0.02\program\Debug\List\core.asm(1150): warning: .cseg .db misalignment - padding zero byte
00005b 0000      	.DB  0x0
                 _0x2020003:
00005c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005d 0008      	.DW  0x08
00005e 0006      	.DW  0x06
00005f 0054      	.DW  __REG_VARS*2
                 
000060 0002      	.DW  0x02
000061 01ea      	.DW  _lastMode
000062 005c      	.DW  _0x9*2
                 
000063 000a      	.DW  0x0A
000064 0160      	.DW  _0xA
000065 005e      	.DW  _0x0*2
                 
000066 0011      	.DW  0x11
000067 016a      	.DW  _0xA+10
000068 0068      	.DW  _0x0*2+10
                 
000069 0011      	.DW  0x11
00006a 017b      	.DW  _0xA+27
00006b 0079      	.DW  _0x0*2+27
                 
00006c 000a      	.DW  0x0A
00006d 018c      	.DW  _0xA+44
00006e 005e      	.DW  _0x0*2
                 
00006f 0011      	.DW  0x11
000070 0196      	.DW  _0xA+54
000071 008a      	.DW  _0x0*2+44
                 
000072 0011      	.DW  0x11
000073 01a7      	.DW  _0xA+71
000074 008a      	.DW  _0x0*2+44
                 
000075 0011      	.DW  0x11
000076 01b8      	.DW  _0xA+88
000077 009b      	.DW  _0x0*2+61
                 
000078 0011      	.DW  0x11
000079 01c9      	.DW  _0xA+105
00007a 008a      	.DW  _0x0*2+44
                 
00007b 0001      	.DW  0x01
00007c 01ec      	.DW  __seed_G100
00007d 00ac      	.DW  _0x2000060*2
                 
00007e 0002      	.DW  0x02
00007f 01f0      	.DW  __base_y_G101
000080 00b8      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000081 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000082 94f8      	CLI
000083 27ee      	CLR  R30
000084 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000085 e0f1      	LDI  R31,1
000086 bffb      	OUT  GICR,R31
000087 bfeb      	OUT  GICR,R30
000088 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000089 e08d      	LDI  R24,(14-2)+1
00008a e0a2      	LDI  R26,2
00008b 27bb      	CLR  R27
                 __CLEAR_REG:
00008c 93ed      	ST   X+,R30
00008d 958a      	DEC  R24
00008e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000090 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000091 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000092 93ed      	ST   X+,R30
000093 9701      	SBIW R24,1
000094 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000095 ebea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000096 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000097 9185      	LPM  R24,Z+
000098 9195      	LPM  R25,Z+
000099 9700      	SBIW R24,0
00009a f061      	BREQ __GLOBAL_INI_END
00009b 91a5      	LPM  R26,Z+
00009c 91b5      	LPM  R27,Z+
00009d 9005      	LPM  R0,Z+
00009e 9015      	LPM  R1,Z+
00009f 01bf      	MOVW R22,R30
0000a0 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a1 9005      	LPM  R0,Z+
0000a2 920d      	ST   X+,R0
0000a3 9701      	SBIW R24,1
0000a4 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a5 01fb      	MOVW R30,R22
0000a6 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a7 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a8 bfed      	OUT  SPL,R30
0000a9 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000aa bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ab e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ac e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ad 940c 00dd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;char String[16];
                 ;int value;
                 ;int limit0=410,limit1=410,limit2=410;
                 ;int mode = 0; //0 --> normal ,,, 1 ---> calibrate
                 ;// new
                 ;void ADC_init(){
                 ; 0000 0012 void ADC_init(){
                 
                 	.CSEG
                 _ADC_init:
                 ; .FSTART _ADC_init
                 ; 0000 0013     // initialize ADC
                 ; 0000 0014     DDRA=0x0;            /* Make ADC port as input */
0000af e0e0      	LDI  R30,LOW(0)
0000b0 bbea      	OUT  0x1A,R30
                 ; 0000 0015     ADCSRA = 0x87;            /* Enable ADC, fr/128  */
0000b1 e8e7      	LDI  R30,LOW(135)
0000b2 b9e6      	OUT  0x6,R30
                 ; 0000 0016     ADMUX = 0x40;            /* Vref: Avcc, ADC channel: 0 */
0000b3 e4e0      	LDI  R30,LOW(64)
0000b4 b9e7      	OUT  0x7,R30
                 ; 0000 0017 }
0000b5 9508      	RET
                 ; .FEND
                 ;int ADC_Read(char channel)
                 ; 0000 0019 {
                 _ADC_Read:
                 ; .FSTART _ADC_Read
                 ; 0000 001A     int Ain,AinLow;
                 ; 0000 001B 
                 ; 0000 001C     ADMUX=ADMUX|(channel & 0x0f);    /* Set input channel to read */
0000b6 93aa      	ST   -Y,R26
0000b7 940e 02ed 	CALL __SAVELOCR4
                 ;	channel -> Y+4
                 ;	Ain -> R16,R17
                 ;	AinLow -> R18,R19
0000b9 b1e7      	IN   R30,0x7
0000ba 2fae      	MOV  R26,R30
0000bb 81ec      	LDD  R30,Y+4
0000bc 70ef      	ANDI R30,LOW(0xF)
0000bd 2bea      	OR   R30,R26
0000be b9e7      	OUT  0x7,R30
                 ; 0000 001D 
                 ; 0000 001E     ADCSRA |= (1<<ADSC);        /* Start conversion */
0000bf 9a36      	SBI  0x6,6
                 ; 0000 001F     while((ADCSRA&(1<<ADIF))==0);    /* Monitor end of conversion interrupt */
                 _0x3:
0000c0 9b34      	SBIS 0x6,4
0000c1 cffe      	RJMP _0x3
                 ; 0000 0020 
                 ; 0000 0021     delay_us(10);
                +
0000c2 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0022     AinLow = (int)ADCL;        /* Read lower byte*/
0000c5 b124      	IN   R18,4
0000c6 2733      	CLR  R19
                 ; 0000 0023     Ain = (int)ADCH*256;        /* Read higher 2 bits and
                 ; 0000 0024                     Multiply with weight */
0000c7 b1e5      	IN   R30,0x5
0000c8 2ffe      	MOV  R31,R30
0000c9 e0e0      	LDI  R30,0
0000ca 018f      	MOVW R16,R30
                 ; 0000 0025     Ain = Ain + AinLow;
                +
0000cb 0f02     +ADD R16 , R18
0000cc 1f13     +ADC R17 , R19
                 	__ADDWRR 16,17,18,19
                 ; 0000 0026     return(Ain);            /* Return digital value*/
0000cd 01f8      	MOVW R30,R16
0000ce 940e 02f2 	CALL __LOADLOCR4
0000d0 9625      	ADIW R28,5
0000d1 9508      	RET
                 ; 0000 0027 }
                 ; .FEND
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0029 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000d2 93ea      	ST   -Y,R30
0000d3 b7ef      	IN   R30,SREG
0000d4 93ea      	ST   -Y,R30
                 ; 0000 002A // Place your code here
                 ; 0000 002B  mode = mode ^ 1;
0000d5 e0e1      	LDI  R30,LOW(1)
0000d6 26ce      	EOR  R12,R30
                 ; 0000 002C  PORTB = 0x00;
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bbe8      	OUT  0x18,R30
                 ; 0000 002D }
0000d9 91e9      	LD   R30,Y+
0000da bfef      	OUT  SREG,R30
0000db 91e9      	LD   R30,Y+
0000dc 9518      	RETI
                 ; .FEND
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0030 {
                 ; 0000 0031 ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 0032 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0033 delay_us(10);
                 ; 0000 0034 // Start the AD conversion
                 ; 0000 0035 ADCSRA|=(1<<ADSC);
                 ; 0000 0036 // Wait for the AD conversion to complete
                 ; 0000 0037 while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 0038 ADCSRA|=(1<<ADIF);
                 ; 0000 0039 return ADCW;
                 ; 0000 003A }
                 ;
                 ;int lastMode=-1;
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 003E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 003F // Declare your local variables here
                 ; 0000 0040 
                 ; 0000 0041 // Input/Output Ports initialization
                 ; 0000 0042 // Port A initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000dd e0e0      	LDI  R30,LOW(0)
0000de bbea      	OUT  0x1A,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000df bbeb      	OUT  0x1B,R30
                 ; 0000 0047 
                 ; 0000 0048 // Port B initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000e0 bbe7      	OUT  0x17,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000e1 bbe8      	OUT  0x18,R30
                 ; 0000 004D 
                 ; 0000 004E // Port C initialization
                 ; 0000 004F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0050 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000e2 bbe4      	OUT  0x14,R30
                 ; 0000 0051 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0052 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000e3 bbe5      	OUT  0x15,R30
                 ; 0000 0053 
                 ; 0000 0054 // Port D initialization
                 ; 0000 0055 // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0056 DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000e4 e7e0      	LDI  R30,LOW(112)
0000e5 bbe1      	OUT  0x11,R30
                 ; 0000 0057 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0058 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000e6 e0e4      	LDI  R30,LOW(4)
0000e7 bbe2      	OUT  0x12,R30
                 ; 0000 0059 
                 ; 0000 005A // Timer/Counter 0 initialization
                 ; 0000 005B // Clock source: System Clock
                 ; 0000 005C // Clock value: Timer 0 Stopped
                 ; 0000 005D // Mode: Normal top=0xFF
                 ; 0000 005E // OC0 output: Disconnected
                 ; 0000 005F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 bfe3      	OUT  0x33,R30
                 ; 0000 0060 TCNT0=0x00;
0000ea bfe2      	OUT  0x32,R30
                 ; 0000 0061 OCR0=0x00;
0000eb bfec      	OUT  0x3C,R30
                 ; 0000 0062 
                 ; 0000 0063 // Timer/Counter 1 initialization
                 ; 0000 0064 // Clock source: System Clock
                 ; 0000 0065 // Clock value: Timer1 Stopped
                 ; 0000 0066 // Mode: Normal top=0xFFFF
                 ; 0000 0067 // OC1A output: Disconnected
                 ; 0000 0068 // OC1B output: Disconnected
                 ; 0000 0069 // Noise Canceler: Off
                 ; 0000 006A // Input Capture on Falling Edge
                 ; 0000 006B // Timer1 Overflow Interrupt: Off
                 ; 0000 006C // Input Capture Interrupt: Off
                 ; 0000 006D // Compare A Match Interrupt: Off
                 ; 0000 006E // Compare B Match Interrupt: Off
                 ; 0000 006F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ec bdef      	OUT  0x2F,R30
                 ; 0000 0070 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000ed bdee      	OUT  0x2E,R30
                 ; 0000 0071 TCNT1H=0x00;
0000ee bded      	OUT  0x2D,R30
                 ; 0000 0072 TCNT1L=0x00;
0000ef bdec      	OUT  0x2C,R30
                 ; 0000 0073 ICR1H=0x00;
0000f0 bde7      	OUT  0x27,R30
                 ; 0000 0074 ICR1L=0x00;
0000f1 bde6      	OUT  0x26,R30
                 ; 0000 0075 OCR1AH=0x00;
0000f2 bdeb      	OUT  0x2B,R30
                 ; 0000 0076 OCR1AL=0x00;
0000f3 bdea      	OUT  0x2A,R30
                 ; 0000 0077 OCR1BH=0x00;
0000f4 bde9      	OUT  0x29,R30
                 ; 0000 0078 OCR1BL=0x00;
0000f5 bde8      	OUT  0x28,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer/Counter 2 initialization
                 ; 0000 007B // Clock source: System Clock
                 ; 0000 007C // Clock value: Timer2 Stopped
                 ; 0000 007D // Mode: Normal top=0xFF
                 ; 0000 007E // OC2 output: Disconnected
                 ; 0000 007F ASSR=0<<AS2;
0000f6 bde2      	OUT  0x22,R30
                 ; 0000 0080 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f7 bde5      	OUT  0x25,R30
                 ; 0000 0081 TCNT2=0x00;
0000f8 bde4      	OUT  0x24,R30
                 ; 0000 0082 OCR2=0x00;
0000f9 bde3      	OUT  0x23,R30
                 ; 0000 0083 
                 ; 0000 0084 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0085 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000fa bfe9      	OUT  0x39,R30
                 ; 0000 0086 
                 ; 0000 0087 // External Interrupt(s) initialization
                 ; 0000 0088 // INT0: On
                 ; 0000 0089 // INT0 Mode: Rising Edge
                 ; 0000 008A // INT1: Off
                 ; 0000 008B // INT2: Off
                 ; 0000 008C GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000fb b7eb      	IN   R30,0x3B
0000fc 64e0      	ORI  R30,0x40
0000fd bfeb      	OUT  0x3B,R30
                 ; 0000 008D MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000fe e0e3      	LDI  R30,LOW(3)
0000ff bfe5      	OUT  0x35,R30
                 ; 0000 008E MCUCSR=(0<<ISC2);
000100 e0e0      	LDI  R30,LOW(0)
000101 bfe4      	OUT  0x34,R30
                 ; 0000 008F GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000102 e4e0      	LDI  R30,LOW(64)
000103 bfea      	OUT  0x3A,R30
                 ; 0000 0090 #asm("sei");
000104 9478      	sei
                 ; 0000 0091 // USART initialization
                 ; 0000 0092 // USART disabled
                 ; 0000 0093 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000105 e0e0      	LDI  R30,LOW(0)
000106 b9ea      	OUT  0xA,R30
                 ; 0000 0094 
                 ; 0000 0095 // Analog Comparator initialization
                 ; 0000 0096 // Analog Comparator: Off
                 ; 0000 0097 // The Analog Comparator's positive input is
                 ; 0000 0098 // connected to the AIN0 pin
                 ; 0000 0099 // The Analog Comparator's negative input is
                 ; 0000 009A // connected to the AIN1 pin
                 ; 0000 009B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000107 e8e0      	LDI  R30,LOW(128)
000108 b9e8      	OUT  0x8,R30
                 ; 0000 009C 
                 ; 0000 009D // ADC initialization
                 ; 0000 009E // ADC Clock frequency: 500.000 kHz
                 ; 0000 009F // ADC Voltage Reference: AVCC pin
                 ; 0000 00A0 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00A1 ADMUX=ADC_VREF_TYPE;
000109 e0e0      	LDI  R30,LOW(0)
00010a b9e7      	OUT  0x7,R30
                 ; 0000 00A2 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00010b e8e1      	LDI  R30,LOW(129)
00010c b9e6      	OUT  0x6,R30
                 ; 0000 00A3 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00010d e0e0      	LDI  R30,LOW(0)
00010e bfe0      	OUT  0x30,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // SPI initialization
                 ; 0000 00A6 // SPI disabled
                 ; 0000 00A7 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00010f b9ed      	OUT  0xD,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // TWI initialization
                 ; 0000 00AA // TWI disabled
                 ; 0000 00AB TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000110 bfe6      	OUT  0x36,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Alphanumeric LCD initialization
                 ; 0000 00AE // Connections are specified in the
                 ; 0000 00AF // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B0 // RS - PORTB Bit 0
                 ; 0000 00B1 // RD - PORTB Bit 1
                 ; 0000 00B2 // EN - PORTB Bit 2
                 ; 0000 00B3 // D4 - PORTB Bit 4
                 ; 0000 00B4 // D5 - PORTB Bit 5
                 ; 0000 00B5 // D6 - PORTB Bit 6
                 ; 0000 00B6 // D7 - PORTB Bit 7
                 ; 0000 00B7 // Characters/line: 16
                 ; 0000 00B8 lcd_init(16);
000111 e1a0      	LDI  R26,LOW(16)
000112 940e 0276 	CALL _lcd_init
                 ; 0000 00B9 
                 ; 0000 00BA 
                 ; 0000 00BB 
                 ; 0000 00BC 
                 ; 0000 00BD //ADC_Init();
                 ; 0000 00BE //LCD_Init();            /* Initialization of LCD */
                 ; 0000 00BF lcd_clear();
000114 940e 02a4 	CALL SUBOPT_0x0
                 ; 0000 00C0 lcd_gotoxy(0,0);
                 ; 0000 00C1 lcd_puts("ADC value");    /* Write string on 1st line of LCD */
                +
000116 e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
000117 e0b1     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
000118 940e 02ab 	CALL SUBOPT_0x1
                 ; 0000 00C2 
                 ; 0000 00C3 ADC_init();
                 ; 0000 00C4 
                 ; 0000 00C5 //DDRC=0x07;
                 ; 0000 00C6 
                 ; 0000 00C7 lcd_clear();
00011a 940e 02a4 	CALL SUBOPT_0x0
                 ; 0000 00C8 lcd_gotoxy(0,0);
                 ; 0000 00C9 lcd_puts("    LCD TEST    ");
                +
00011c e6aa     +LDI R26 , LOW ( _0xA + ( 10 ) )
00011d e0b1     +LDI R27 , HIGH ( _0xA + ( 10 ) )
                 	__POINTW2MN _0xA,10
00011e 940e 02af 	CALL SUBOPT_0x2
                 ; 0000 00CA lcd_gotoxy(0,1);
                 ; 0000 00CB lcd_puts(" <<<< DONE >>>> ");
                +
000120 e7ab     +LDI R26 , LOW ( _0xA + ( 27 ) )
000121 e0b1     +LDI R27 , HIGH ( _0xA + ( 27 ) )
                 	__POINTW2MN _0xA,27
000122 940e 02af 	CALL SUBOPT_0x2
                 ; 0000 00CC lcd_gotoxy(0,1);
                 ; 0000 00CD //lcd_puts("START");
                 ; 0000 00CE delay_ms(1000);
000124 eea8      	LDI  R26,LOW(1000)
000125 e0b3      	LDI  R27,HIGH(1000)
000126 940e 02e3 	CALL _delay_ms
                 ; 0000 00CF 
                 ; 0000 00D0 while (1)
                 _0xB:
                 ; 0000 00D1       {
                 ; 0000 00D2       // Place your code here
                 ; 0000 00D3       int v0=0,v1=0,v2=0;
                 ; 0000 00D4       ADC_init();
000128 9726      	SBIW R28,6
000129 e0e0      	LDI  R30,LOW(0)
00012a 83e8      	ST   Y,R30
00012b 83e9      	STD  Y+1,R30
00012c 83ea      	STD  Y+2,R30
00012d 83eb      	STD  Y+3,R30
00012e 83ec      	STD  Y+4,R30
00012f 83ed      	STD  Y+5,R30
                 ;	v0 -> Y+4
                 ;	v1 -> Y+2
                 ;	v2 -> Y+0
000130 df7e      	RCALL _ADC_init
                 ; 0000 00D5       v0=ADC_Read(0);
000131 e0a0      	LDI  R26,LOW(0)
000132 df83      	RCALL _ADC_Read
000133 83ec      	STD  Y+4,R30
000134 83fd      	STD  Y+4+1,R31
                 ; 0000 00D6       ADC_init();
000135 df79      	RCALL _ADC_init
                 ; 0000 00D7       v1=ADC_Read(1);
000136 e0a1      	LDI  R26,LOW(1)
000137 df7e      	RCALL _ADC_Read
000138 83ea      	STD  Y+2,R30
000139 83fb      	STD  Y+2+1,R31
                 ; 0000 00D8       ADC_init();
00013a df74      	RCALL _ADC_init
                 ; 0000 00D9       v2=ADC_Read(2);
00013b e0a2      	LDI  R26,LOW(2)
00013c df79      	RCALL _ADC_Read
00013d 83e8      	ST   Y,R30
00013e 83f9      	STD  Y+1,R31
                 ; 0000 00DA       //int v2=ADC_Read(2);
                 ; 0000 00DB       if(mode == 0){
00013f 2c0c      	MOV  R0,R12
000140 280d      	OR   R0,R13
000141 f009      	BREQ PC+2
000142 c04a      	RJMP _0xE
                 ; 0000 00DC         if(v0>=limit0)
000143 81ac      	LDD  R26,Y+4
000144 81bd      	LDD  R27,Y+4+1
000145 15a6      	CP   R26,R6
000146 05b7      	CPC  R27,R7
000147 f014      	BRLT _0xF
                 ; 0000 00DD             PORTD.4=1;
000148 9a94      	SBI  0x12,4
                 ; 0000 00DE         else
000149 c001      	RJMP _0x12
                 _0xF:
                 ; 0000 00DF             PORTD.4=0;
00014a 9894      	CBI  0x12,4
                 ; 0000 00E0 
                 ; 0000 00E1         if(v1>=limit1)
                 _0x12:
00014b 81aa      	LDD  R26,Y+2
00014c 81bb      	LDD  R27,Y+2+1
00014d 15a8      	CP   R26,R8
00014e 05b9      	CPC  R27,R9
00014f f014      	BRLT _0x15
                 ; 0000 00E2             PORTD.5=1;
000150 9a95      	SBI  0x12,5
                 ; 0000 00E3         else
000151 c001      	RJMP _0x18
                 _0x15:
                 ; 0000 00E4             PORTD.5=0;
000152 9895      	CBI  0x12,5
                 ; 0000 00E5 
                 ; 0000 00E6         if(v2>=limit2)
                 _0x18:
000153 81a8      	LD   R26,Y
000154 81b9      	LDD  R27,Y+1
000155 15aa      	CP   R26,R10
000156 05bb      	CPC  R27,R11
000157 f014      	BRLT _0x1B
                 ; 0000 00E7             PORTD.6=1;
000158 9a96      	SBI  0x12,6
                 ; 0000 00E8         else
000159 c001      	RJMP _0x1E
                 _0x1B:
                 ; 0000 00E9             PORTD.6=0;
00015a 9896      	CBI  0x12,6
                 ; 0000 00EA         if(lastMode != 0){
                 _0x1E:
00015b 91e0 01ea 	LDS  R30,_lastMode
00015d 91f0 01eb 	LDS  R31,_lastMode+1
00015f 9730      	SBIW R30,0
000160 f031      	BREQ _0x21
                 ; 0000 00EB             lcd_clear();
000161 940e 02a4 	CALL SUBOPT_0x0
                 ; 0000 00EC             lcd_gotoxy(0,0);
                 ; 0000 00ED             lcd_puts("ADC value");
                +
000163 e8ac     +LDI R26 , LOW ( _0xA + ( 44 ) )
000164 e0b1     +LDI R27 , HIGH ( _0xA + ( 44 ) )
                 	__POINTW2MN _0xA,44
000165 940e 0265 	CALL _lcd_puts
                 ; 0000 00EE         }
                 ; 0000 00EF         lcd_gotoxy(0,1);
                 _0x21:
000167 940e 02b6 	CALL SUBOPT_0x3
                 ; 0000 00F0         lcd_puts("                ");   //cleen lcd line 0
                +
000169 e9a6     +LDI R26 , LOW ( _0xA + ( 54 ) )
00016a e0b1     +LDI R27 , HIGH ( _0xA + ( 54 ) )
                 	__POINTW2MN _0xA,54
00016b 940e 02af 	CALL SUBOPT_0x2
                 ; 0000 00F1         lcd_gotoxy(0,1);
                 ; 0000 00F2         itoa(v0,String);    /* Integer to string conversion */
00016d 81ec      	LDD  R30,Y+4
00016e 81fd      	LDD  R31,Y+4+1
00016f 940e 02bb 	CALL SUBOPT_0x4
                 ; 0000 00F3         lcd_gotoxy(0,1);
000171 940e 02b6 	CALL SUBOPT_0x3
                 ; 0000 00F4         lcd_puts(String);
000173 940e 02c1 	CALL SUBOPT_0x5
                 ; 0000 00F5         itoa(v1,String);    /* Integer to string conversion */
000175 81ea      	LDD  R30,Y+2
000176 81fb      	LDD  R31,Y+2+1
000177 940e 02bb 	CALL SUBOPT_0x4
                 ; 0000 00F6         lcd_gotoxy(5,1);
000179 e0e5      	LDI  R30,LOW(5)
00017a 940e 02c5 	CALL SUBOPT_0x6
                 ; 0000 00F7         lcd_puts(String);
                 ; 0000 00F8         itoa(v2,String);    /* Integer to string conversion */
00017c 81e8      	LD   R30,Y
00017d 81f9      	LDD  R31,Y+1
00017e 940e 02bb 	CALL SUBOPT_0x4
                 ; 0000 00F9         lcd_gotoxy(12,1);
000180 e0ec      	LDI  R30,LOW(12)
000181 940e 02c5 	CALL SUBOPT_0x6
                 ; 0000 00FA         lcd_puts(String);
                 ; 0000 00FB         delay_ms(500);
000183 efa4      	LDI  R26,LOW(500)
000184 e0b1      	LDI  R27,HIGH(500)
000185 940e 02e3 	CALL _delay_ms
                 ; 0000 00FC         lastMode=0;
000187 e0e0      	LDI  R30,LOW(0)
000188 93e0 01ea 	STS  _lastMode,R30
00018a 93e0 01eb 	STS  _lastMode+1,R30
                 ; 0000 00FD        // mode=0;
                 ; 0000 00FE       }else{
00018c c048      	RJMP _0x22
                 _0xE:
                 ; 0000 00FF         if(lastMode!=1){
00018d 91a0 01ea 	LDS  R26,_lastMode
00018f 91b0 01eb 	LDS  R27,_lastMode+1
000191 9711      	SBIW R26,1
000192 f091      	BREQ _0x23
                 ; 0000 0100             lcd_gotoxy(0,0);
000193 e0e0      	LDI  R30,LOW(0)
000194 93ea      	ST   -Y,R30
000195 e0a0      	LDI  R26,LOW(0)
000196 940e 0226 	CALL _lcd_gotoxy
                 ; 0000 0101             lcd_puts("                ");   //cleen lcd line 0
                +
000198 eaa7     +LDI R26 , LOW ( _0xA + ( 71 ) )
000199 e0b1     +LDI R27 , HIGH ( _0xA + ( 71 ) )
                 	__POINTW2MN _0xA,71
00019a 940e 0265 	CALL _lcd_puts
                 ; 0000 0102             lcd_gotoxy(0,0);
00019c e0e0      	LDI  R30,LOW(0)
00019d 93ea      	ST   -Y,R30
00019e e0a0      	LDI  R26,LOW(0)
00019f 940e 0226 	CALL _lcd_gotoxy
                 ; 0000 0103             lcd_puts("  Calibrating   ");
                +
0001a1 eba8     +LDI R26 , LOW ( _0xA + ( 88 ) )
0001a2 e0b1     +LDI R27 , HIGH ( _0xA + ( 88 ) )
                 	__POINTW2MN _0xA,88
0001a3 940e 0265 	CALL _lcd_puts
                 ; 0000 0104         }
                 ; 0000 0105         lcd_gotoxy(0,1);
                 _0x23:
0001a5 940e 02b6 	CALL SUBOPT_0x3
                 ; 0000 0106         lcd_puts("                ");   //cleen lcd line 0
                +
0001a7 eca9     +LDI R26 , LOW ( _0xA + ( 105 ) )
0001a8 e0b1     +LDI R27 , HIGH ( _0xA + ( 105 ) )
                 	__POINTW2MN _0xA,105
0001a9 940e 02af 	CALL SUBOPT_0x2
                 ; 0000 0107         lcd_gotoxy(0,1);
                 ; 0000 0108         ADC_init();
0001ab df03      	RCALL _ADC_init
                 ; 0000 0109         limit0 = ADC_Read(0);
0001ac e0a0      	LDI  R26,LOW(0)
0001ad df08      	RCALL _ADC_Read
0001ae 013f      	MOVW R6,R30
                 ; 0000 010A 
                 ; 0000 010B         itoa(limit0,String);    /* Integer to string conversion */
0001af 927a      	ST   -Y,R7
0001b0 926a      	ST   -Y,R6
0001b1 940e 02ca 	CALL SUBOPT_0x7
                 ; 0000 010C         lcd_gotoxy(0,1);
0001b3 940e 02b6 	CALL SUBOPT_0x3
                 ; 0000 010D         lcd_puts(String);
0001b5 940e 02ce 	CALL SUBOPT_0x8
                 ; 0000 010E 
                 ; 0000 010F         ADC_init();
                 ; 0000 0110         limit1 = ADC_Read(1);
0001b7 e0a1      	LDI  R26,LOW(1)
0001b8 defd      	RCALL _ADC_Read
0001b9 014f      	MOVW R8,R30
                 ; 0000 0111 
                 ; 0000 0112         itoa(limit1,String);    /* Integer to string conversion */
0001ba 929a      	ST   -Y,R9
0001bb 928a      	ST   -Y,R8
0001bc 940e 02ca 	CALL SUBOPT_0x7
                 ; 0000 0113         lcd_gotoxy(5,1);
0001be e0e5      	LDI  R30,LOW(5)
0001bf 940e 02d1 	CALL SUBOPT_0x9
                 ; 0000 0114         lcd_puts(String);
                 ; 0000 0115 
                 ; 0000 0116         ADC_init();
                 ; 0000 0117         limit2 = ADC_Read(2);
0001c1 e0a2      	LDI  R26,LOW(2)
0001c2 def3      	RCALL _ADC_Read
0001c3 015f      	MOVW R10,R30
                 ; 0000 0118 
                 ; 0000 0119         itoa(limit2,String);    /* Integer to string conversion */
0001c4 92ba      	ST   -Y,R11
0001c5 92aa      	ST   -Y,R10
0001c6 940e 02ca 	CALL SUBOPT_0x7
                 ; 0000 011A         lcd_gotoxy(12,1);
0001c8 e0ec      	LDI  R30,LOW(12)
0001c9 940e 02d1 	CALL SUBOPT_0x9
                 ; 0000 011B         lcd_puts(String);
                 ; 0000 011C 
                 ; 0000 011D         ADC_init();
                 ; 0000 011E         lastMode=1;
0001cb e0e1      	LDI  R30,LOW(1)
0001cc e0f0      	LDI  R31,HIGH(1)
0001cd 93e0 01ea 	STS  _lastMode,R30
0001cf 93f0 01eb 	STS  _lastMode+1,R31
                 ; 0000 011F         delay_ms(150);
0001d1 e9a6      	LDI  R26,LOW(150)
0001d2 e0b0      	LDI  R27,0
0001d3 940e 02e3 	CALL _delay_ms
                 ; 0000 0120 
                 ; 0000 0121       }
                 _0x22:
                 ; 0000 0122 
                 ; 0000 0123 
                 ; 0000 0124       }
0001d5 9626      	ADIW R28,6
0001d6 cf51      	RJMP _0xB
                 ; 0000 0125 }
                 _0x24:
0001d7 cfff      	RJMP _0x24
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000160           	.BYTE 0x7A
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0001d8 93ba      	ST   -Y,R27
0001d9 93aa      	ST   -Y,R26
0001da 91a9          ld   r26,y+
0001db 91b9          ld   r27,y+
0001dc 91e9          ld   r30,y+
0001dd 91f9          ld   r31,y+
0001de 9630          adiw r30,0
0001df f42a          brpl __itoa0
0001e0 95e0          com  r30
0001e1 95f0          com  r31
0001e2 9631          adiw r30,1
0001e3 e26d          ldi  r22,'-'
0001e4 936d          st   x+,r22
                 __itoa0:
0001e5 94e8          clt
0001e6 e180          ldi  r24,low(10000)
0001e7 e297          ldi  r25,high(10000)
0001e8 d00d          rcall __itoa1
0001e9 ee88          ldi  r24,low(1000)
0001ea e093          ldi  r25,high(1000)
0001eb d00a          rcall __itoa1
0001ec e684          ldi  r24,100
0001ed 2799          clr  r25
0001ee d007          rcall __itoa1
0001ef e08a          ldi  r24,10
0001f0 d005          rcall __itoa1
0001f1 2f6e          mov  r22,r30
0001f2 d010          rcall __itoa5
0001f3 2766          clr  r22
0001f4 936c          st   x,r22
0001f5 9508          ret
                 
                 __itoa1:
0001f6 2766          clr	 r22
                 __itoa2:
0001f7 17e8          cp   r30,r24
0001f8 07f9          cpc  r31,r25
0001f9 f020          brlo __itoa3
0001fa 9563          inc  r22
0001fb 1be8          sub  r30,r24
0001fc 0bf9          sbc  r31,r25
0001fd f7c9          brne __itoa2
                 __itoa3:
0001fe 2366          tst  r22
0001ff f411          brne __itoa4
000200 f016          brts __itoa5
000201 9508          ret
                 __itoa4:
000202 9468          set
                 __itoa5:
000203 5d60          subi r22,-0x30
000204 936d          st   x+,r22
000205 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000206 93aa      	ST   -Y,R26
000207 b3e8      	IN   R30,0x18
000208 70ef      	ANDI R30,LOW(0xF)
000209 2fae      	MOV  R26,R30
00020a 81e8      	LD   R30,Y
00020b 7fe0      	ANDI R30,LOW(0xF0)
00020c 2bea      	OR   R30,R26
00020d bbe8      	OUT  0x18,R30
                +
00020e e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00020f 958a     +DEC R24
000210 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000211 9ac2      	SBI  0x18,2
                +
000212 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000213 958a     +DEC R24
000214 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000215 98c2      	CBI  0x18,2
                +
000216 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000217 958a     +DEC R24
000218 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000219 c088      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00021a 93aa      	ST   -Y,R26
00021b 81a8      	LD   R26,Y
00021c dfe9      	RCALL __lcd_write_nibble_G101
00021d 81e8          ld    r30,y
00021e 95e2          swap  r30
00021f 83e8          st    y,r30
000220 81a8      	LD   R26,Y
000221 dfe4      	RCALL __lcd_write_nibble_G101
                +
000222 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000223 958a     +DEC R24
000224 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000225 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000226 93aa      	ST   -Y,R26
000227 81e8      	LD   R30,Y
000228 e0f0      	LDI  R31,0
000229 51e0      	SUBI R30,LOW(-__base_y_G101)
00022a 4ffe      	SBCI R31,HIGH(-__base_y_G101)
00022b 81e0      	LD   R30,Z
00022c 81a9      	LDD  R26,Y+1
00022d 0fae      	ADD  R26,R30
00022e dfeb      	RCALL __lcd_write_data
00022f 81e9      	LDD  R30,Y+1
000230 93e0 01f4 	STS  __lcd_x,R30
000232 81e8      	LD   R30,Y
000233 93e0 01f5 	STS  __lcd_y,R30
000235 9622      	ADIW R28,2
000236 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000237 e0a2      	LDI  R26,LOW(2)
000238 940e 02d6 	CALL SUBOPT_0xA
00023a e0ac      	LDI  R26,LOW(12)
00023b dfde      	RCALL __lcd_write_data
00023c e0a1      	LDI  R26,LOW(1)
00023d 940e 02d6 	CALL SUBOPT_0xA
00023f e0e0      	LDI  R30,LOW(0)
000240 93e0 01f5 	STS  __lcd_y,R30
000242 93e0 01f4 	STS  __lcd_x,R30
000244 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000245 93aa      	ST   -Y,R26
000246 81a8      	LD   R26,Y
000247 30aa      	CPI  R26,LOW(0xA)
000248 f031      	BREQ _0x2020005
000249 91e0 01f6 	LDS  R30,__lcd_maxx
00024b 91a0 01f4 	LDS  R26,__lcd_x
00024d 17ae      	CP   R26,R30
00024e f060      	BRLO _0x2020004
                 _0x2020005:
00024f e0e0      	LDI  R30,LOW(0)
000250 93ea      	ST   -Y,R30
000251 91a0 01f5 	LDS  R26,__lcd_y
000253 5faf      	SUBI R26,-LOW(1)
000254 93a0 01f5 	STS  __lcd_y,R26
000256 dfcf      	RCALL _lcd_gotoxy
000257 81a8      	LD   R26,Y
000258 30aa      	CPI  R26,LOW(0xA)
000259 f409      	BRNE _0x2020007
00025a c047      	RJMP _0x20A0001
                 _0x2020007:
                 _0x2020004:
00025b 91e0 01f4 	LDS  R30,__lcd_x
00025d 5fef      	SUBI R30,-LOW(1)
00025e 93e0 01f4 	STS  __lcd_x,R30
000260 9ac0      	SBI  0x18,0
000261 81a8      	LD   R26,Y
000262 dfb7      	RCALL __lcd_write_data
000263 98c0      	CBI  0x18,0
000264 c03d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000265 93ba      	ST   -Y,R27
000266 93aa      	ST   -Y,R26
000267 931a      	ST   -Y,R17
                 _0x2020008:
000268 81a9      	LDD  R26,Y+1
000269 81ba      	LDD  R27,Y+1+1
00026a 91ed      	LD   R30,X+
00026b 83a9      	STD  Y+1,R26
00026c 83ba      	STD  Y+1+1,R27
00026d 2f1e      	MOV  R17,R30
00026e 30e0      	CPI  R30,0
00026f f019      	BREQ _0x202000A
000270 2fa1      	MOV  R26,R17
000271 dfd3      	RCALL _lcd_putchar
000272 cff5      	RJMP _0x2020008
                 _0x202000A:
000273 8118      	LDD  R17,Y+0
000274 9623      	ADIW R28,3
000275 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000276 93aa      	ST   -Y,R26
000277 b3e7      	IN   R30,0x17
000278 6fe0      	ORI  R30,LOW(0xF0)
000279 bbe7      	OUT  0x17,R30
00027a 9aba      	SBI  0x17,2
00027b 9ab8      	SBI  0x17,0
00027c 9ab9      	SBI  0x17,1
00027d 98c2      	CBI  0x18,2
00027e 98c0      	CBI  0x18,0
00027f 98c1      	CBI  0x18,1
000280 81e8      	LD   R30,Y
000281 93e0 01f6 	STS  __lcd_maxx,R30
000283 58e0      	SUBI R30,-LOW(128)
                +
000284 93e0 01f2+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000286 81e8      	LD   R30,Y
000287 54e0      	SUBI R30,-LOW(192)
                +
000288 93e0 01f3+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00028a e1a4      	LDI  R26,LOW(20)
00028b e0b0      	LDI  R27,0
00028c 940e 02e3 	CALL _delay_ms
00028e 940e 02dc 	CALL SUBOPT_0xB
000290 940e 02dc 	CALL SUBOPT_0xB
000292 940e 02dc 	CALL SUBOPT_0xB
000294 e2a0      	LDI  R26,LOW(32)
000295 df70      	RCALL __lcd_write_nibble_G101
                +
000296 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000297 958a     +DEC R24
000298 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000299 e2a8      	LDI  R26,LOW(40)
00029a df7f      	RCALL __lcd_write_data
00029b e0a4      	LDI  R26,LOW(4)
00029c df7d      	RCALL __lcd_write_data
00029d e8a5      	LDI  R26,LOW(133)
00029e df7b      	RCALL __lcd_write_data
00029f e0a6      	LDI  R26,LOW(6)
0002a0 df79      	RCALL __lcd_write_data
0002a1 df95      	RCALL _lcd_clear
                 _0x20A0001:
0002a2 9621      	ADIW R28,1
0002a3 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _String:
0001da           	.BYTE 0x10
                 _lastMode:
0001ea           	.BYTE 0x2
                 __seed_G100:
0001ec           	.BYTE 0x4
                 __base_y_G101:
0001f0           	.BYTE 0x4
                 __lcd_x:
0001f4           	.BYTE 0x1
                 __lcd_y:
0001f5           	.BYTE 0x1
                 __lcd_maxx:
0001f6           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
0002a4 940e 0237 	CALL _lcd_clear
0002a6 e0e0      	LDI  R30,LOW(0)
0002a7 93ea      	ST   -Y,R30
0002a8 e0a0      	LDI  R26,LOW(0)
0002a9 940c 0226 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002ab 940e 0265 	CALL _lcd_puts
0002ad 940c 00af 	JMP  _ADC_init
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
0002af 940e 0265 	CALL _lcd_puts
0002b1 e0e0      	LDI  R30,LOW(0)
0002b2 93ea      	ST   -Y,R30
0002b3 e0a1      	LDI  R26,LOW(1)
0002b4 940c 0226 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
0002b6 e0e0      	LDI  R30,LOW(0)
0002b7 93ea      	ST   -Y,R30
0002b8 e0a1      	LDI  R26,LOW(1)
0002b9 940c 0226 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0002bb 93fa      	ST   -Y,R31
0002bc 93ea      	ST   -Y,R30
0002bd edaa      	LDI  R26,LOW(_String)
0002be e0b1      	LDI  R27,HIGH(_String)
0002bf 940c 01d8 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002c1 edaa      	LDI  R26,LOW(_String)
0002c2 e0b1      	LDI  R27,HIGH(_String)
0002c3 940c 0265 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002c5 93ea      	ST   -Y,R30
0002c6 e0a1      	LDI  R26,LOW(1)
0002c7 940e 0226 	CALL _lcd_gotoxy
0002c9 cff7      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002ca edaa      	LDI  R26,LOW(_String)
0002cb e0b1      	LDI  R27,HIGH(_String)
0002cc 940c 01d8 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002ce edaa      	LDI  R26,LOW(_String)
0002cf e0b1      	LDI  R27,HIGH(_String)
0002d0 cfda      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0002d1 93ea      	ST   -Y,R30
0002d2 e0a1      	LDI  R26,LOW(1)
0002d3 940e 0226 	CALL _lcd_gotoxy
0002d5 cff8      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0002d6 940e 021a 	CALL __lcd_write_data
0002d8 e0a3      	LDI  R26,LOW(3)
0002d9 e0b0      	LDI  R27,0
0002da 940c 02e3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
0002dc e3a0      	LDI  R26,LOW(48)
0002dd 940e 0206 	CALL __lcd_write_nibble_G101
                +
0002df e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002e0 958a     +DEC R24
0002e1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0002e2 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002e3 9610      	adiw r26,0
0002e4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002e5 ef8a     +LDI R24 , LOW ( 0xFA )
0002e6 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002e7 9701     +SBIW R24 , 1
0002e8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002e9 95a8      	wdr
0002ea 9711      	sbiw r26,1
0002eb f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ec 9508      	ret
                 
                 __SAVELOCR4:
0002ed 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002ee 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002ef 931a      	ST   -Y,R17
0002f0 930a      	ST   -Y,R16
0002f1 9508      	RET
                 
                 __LOADLOCR4:
0002f2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002f3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002f4 8119      	LDD  R17,Y+1
0002f5 8108      	LD   R16,Y
0002f6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   3 r7 :   2 
r8 :   3 r9 :   2 r10:   3 r11:   2 r12:   2 r13:   1 r14:   0 r15:   0 
r16:   5 r17:   7 r18:   4 r19:   4 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  29 r25:   8 r26:  83 r27:  31 r28:   7 r29:   1 r30: 180 r31:  20 
x  :   7 y  :  87 z  :   8 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   8 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   3 brmi  :   0 brne  :  15 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  48 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   5 cpc   :   4 cpi   :   3 cpse  :   0 dec   :   8 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  30 ld    :  22 ldd   :  19 ldi   : 119 
lds   :   8 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   7 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   2 out   :  51 pop   :   0 push  :   0 rcall :  28 ret   :  13 
reti  :   1 rjmp  :  17 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  42 std   :  12 sts   :  13 sub   :   1 subi  :   6 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005ee   1342    176   1518   16384   9.3%
[.dseg] 0x000060 0x0001f7      0    151    151    1024  14.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
