;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdlib.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;char String[16];
;int value;
;int limit0=410,limit1=410,limit2=410;
;int mode = 0; //0 --> normal ,,, 1 ---> calibrate
;// new
;void ADC_init(){
; 0000 0012 void ADC_init(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0013     // initialize ADC
; 0000 0014     DDRA=0x0;            /* Make ADC port as input */
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0015     ADCSRA = 0x87;            /* Enable ADC, fr/128  */
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0016     ADMUX = 0x40;            /* Vref: Avcc, ADC channel: 0 */
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0017 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;int ADC_Read(char channel)
; 0000 0019 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001A     int Ain,AinLow;
; 0000 001B 
; 0000 001C     ADMUX=ADMUX|(channel & 0x0f);    /* Set input channel to read */
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	channel -> Y+4
;	Ain -> R16,R17
;	AinLow -> R18,R19
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001D 
; 0000 001E     ADCSRA |= (1<<ADSC);        /* Start conversion */
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001F     while((ADCSRA&(1<<ADIF))==0);    /* Monitor end of conversion interrupt */
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0020 
; 0000 0021     delay_us(10);
;PCODE: $00000029 VOL: 0
; 0000 0022     AinLow = (int)ADCL;        /* Read lower byte*/
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0023     Ain = (int)ADCH*256;        /* Read higher 2 bits and
; 0000 0024                     Multiply with weight */
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0025     Ain = Ain + AinLow;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0026     return(Ain);            /* Return digital value*/
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0027 }
;PCODE: $00000036 VOL: 0
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0029 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002A // Place your code here
; 0000 002B  mode = mode ^ 1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002C  PORTB = 0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002D }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0030 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0031 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000043 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0032 // Delay needed for the stabilization of the ADC input voltage
; 0000 0033 delay_us(10);
;PCODE: $00000047 VOL: 0
; 0000 0034 // Start the AD conversion
; 0000 0035 ADCSRA|=(1<<ADSC);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0036 // Wait for the AD conversion to complete
; 0000 0037 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0038 ADCSRA|=(1<<ADIF);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0039 return ADCW;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003A }
;PCODE: $00000055 VOL: 0
;
;int lastMode=-1;

	.DSEG
;void main(void)
; 0000 003E {

	.CSEG
;PCODE: $00000056 VOL: 0
; 0000 003F // Declare your local variables here
; 0000 0040 
; 0000 0041 // Input/Output Ports initialization
; 0000 0042 // Port A initialization
; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0044 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0046 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0047 
; 0000 0048 // Port B initialization
; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004D 
; 0000 004E // Port C initialization
; 0000 004F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0050 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0051 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0052 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0053 
; 0000 0054 // Port D initialization
; 0000 0055 // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0056 DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0057 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0058 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0059 
; 0000 005A // Timer/Counter 0 initialization
; 0000 005B // Clock source: System Clock
; 0000 005C // Clock value: Timer 0 Stopped
; 0000 005D // Mode: Normal top=0xFF
; 0000 005E // OC0 output: Disconnected
; 0000 005F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0060 TCNT0=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0061 OCR0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0062 
; 0000 0063 // Timer/Counter 1 initialization
; 0000 0064 // Clock source: System Clock
; 0000 0065 // Clock value: Timer1 Stopped
; 0000 0066 // Mode: Normal top=0xFFFF
; 0000 0067 // OC1A output: Disconnected
; 0000 0068 // OC1B output: Disconnected
; 0000 0069 // Noise Canceler: Off
; 0000 006A // Input Capture on Falling Edge
; 0000 006B // Timer1 Overflow Interrupt: Off
; 0000 006C // Input Capture Interrupt: Off
; 0000 006D // Compare A Match Interrupt: Off
; 0000 006E // Compare B Match Interrupt: Off
; 0000 006F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0070 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0071 TCNT1H=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0072 TCNT1L=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0073 ICR1H=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0074 ICR1L=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0075 OCR1AH=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0076 OCR1AL=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0077 OCR1BH=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0078 OCR1BL=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0079 
; 0000 007A // Timer/Counter 2 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: Timer2 Stopped
; 0000 007D // Mode: Normal top=0xFF
; 0000 007E // OC2 output: Disconnected
; 0000 007F ASSR=0<<AS2;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0080 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0081 TCNT2=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0082 OCR2=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0083 
; 0000 0084 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0085 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0086 
; 0000 0087 // External Interrupt(s) initialization
; 0000 0088 // INT0: On
; 0000 0089 // INT0 Mode: Rising Edge
; 0000 008A // INT1: Off
; 0000 008B // INT2: Off
; 0000 008C GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008D MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 008E MCUCSR=(0<<ISC2);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008F GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0090 #asm("sei");
;PCODE: $00000094 VOL: 0
	sei
;PCODE: $00000095 VOL: 0
; 0000 0091 // USART initialization
; 0000 0092 // USART disabled
; 0000 0093 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0094 
; 0000 0095 // Analog Comparator initialization
; 0000 0096 // Analog Comparator: Off
; 0000 0097 // The Analog Comparator's positive input is
; 0000 0098 // connected to the AIN0 pin
; 0000 0099 // The Analog Comparator's negative input is
; 0000 009A // connected to the AIN1 pin
; 0000 009B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 009C 
; 0000 009D // ADC initialization
; 0000 009E // ADC Clock frequency: 500.000 kHz
; 0000 009F // ADC Voltage Reference: AVCC pin
; 0000 00A0 // ADC Auto Trigger Source: ADC Stopped
; 0000 00A1 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A2 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A3 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A4 
; 0000 00A5 // SPI initialization
; 0000 00A6 // SPI disabled
; 0000 00A7 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A8 
; 0000 00A9 // TWI initialization
; 0000 00AA // TWI disabled
; 0000 00AB TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00AC 
; 0000 00AD // Alphanumeric LCD initialization
; 0000 00AE // Connections are specified in the
; 0000 00AF // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B0 // RS - PORTB Bit 0
; 0000 00B1 // RD - PORTB Bit 1
; 0000 00B2 // EN - PORTB Bit 2
; 0000 00B3 // D4 - PORTB Bit 4
; 0000 00B4 // D5 - PORTB Bit 5
; 0000 00B5 // D6 - PORTB Bit 6
; 0000 00B6 // D7 - PORTB Bit 7
; 0000 00B7 // Characters/line: 16
; 0000 00B8 lcd_init(16);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B9 
; 0000 00BA 
; 0000 00BB 
; 0000 00BC 
; 0000 00BD //ADC_Init();
; 0000 00BE //LCD_Init();            /* Initialization of LCD */
; 0000 00BF lcd_clear();
;PCODE: $000000A6 VOL: 0
; 0000 00C0 lcd_gotoxy(0,0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C1 lcd_puts("ADC value");    /* Write string on 1st line of LCD */
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00C2 
; 0000 00C3 ADC_init();
;PCODE: $000000AE VOL: 0
; 0000 00C4 
; 0000 00C5 //DDRC=0x07;
; 0000 00C6 
; 0000 00C7 lcd_clear();
;PCODE: $000000AF VOL: 0
; 0000 00C8 lcd_gotoxy(0,0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00C9 lcd_puts("    LCD TEST    ");
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00CA lcd_gotoxy(0,1);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00CB lcd_puts(" <<<< DONE >>>> ");
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CC lcd_gotoxy(0,1);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CD //lcd_puts("START");
; 0000 00CE delay_ms(1000);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00CF 
; 0000 00D0 while (1)
;PCODE: $000000C4 VOL: 0
; 0000 00D1       {
; 0000 00D2       // Place your code here
; 0000 00D3       int v0=0,v1=0,v2=0;
; 0000 00D4       ADC_init();
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;	v0 -> Y+4
;	v1 -> Y+2
;	v2 -> Y+0
;PCODE: $000000D2 VOL: 0
; 0000 00D5       v0=ADC_Read(0);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D6       ADC_init();
;PCODE: $000000D6 VOL: 0
; 0000 00D7       v1=ADC_Read(1);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00D8       ADC_init();
;PCODE: $000000DA VOL: 0
; 0000 00D9       v2=ADC_Read(2);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00DA       //int v2=ADC_Read(2);
; 0000 00DB       if(mode == 0){
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00DC         if(v0>=limit0)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00DD             PORTD.4=1;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00DE         else
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00DF             PORTD.4=0;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00E0 
; 0000 00E1         if(v1>=limit1)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E2             PORTD.5=1;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E3         else
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00E4             PORTD.5=0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00E5 
; 0000 00E6         if(v2>=limit2)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00E7             PORTD.6=1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E8         else
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00E9             PORTD.6=0;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00EA         if(lastMode != 0){
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00EB             lcd_clear();
;PCODE: $00000101 VOL: 0
; 0000 00EC             lcd_gotoxy(0,0);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00ED             lcd_puts("ADC value");
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00EE         }
; 0000 00EF         lcd_gotoxy(0,1);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00F0         lcd_puts("                ");   //cleen lcd line 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00F1         lcd_gotoxy(0,1);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00F2         itoa(v0,String);    /* Integer to string conversion */
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00F3         lcd_gotoxy(0,1);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00F4         lcd_puts(String);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00F5         itoa(v1,String);    /* Integer to string conversion */
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00F6         lcd_gotoxy(5,1);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00F7         lcd_puts(String);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F8         itoa(v2,String);    /* Integer to string conversion */
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F9         lcd_gotoxy(12,1);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00FA         lcd_puts(String);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00FB         delay_ms(500);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00FC         lastMode=0;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00FD        // mode=0;
; 0000 00FE       }else{
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00FF         if(lastMode!=1){
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0100             lcd_gotoxy(0,0);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0101             lcd_puts("                ");   //cleen lcd line 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0102             lcd_gotoxy(0,0);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0103             lcd_puts("  Calibrating   ");
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0104         }
; 0000 0105         lcd_gotoxy(0,1);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0106         lcd_puts("                ");   //cleen lcd line 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0107         lcd_gotoxy(0,1);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0108         ADC_init();
;PCODE: $00000156 VOL: 0
; 0000 0109         limit0 = ADC_Read(0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 010A 
; 0000 010B         itoa(limit0,String);    /* Integer to string conversion */
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 010C         lcd_gotoxy(0,1);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 010D         lcd_puts(String);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 010E 
; 0000 010F         ADC_init();
;PCODE: $00000163 VOL: 0
; 0000 0110         limit1 = ADC_Read(1);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0111 
; 0000 0112         itoa(limit1,String);    /* Integer to string conversion */
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0113         lcd_gotoxy(5,1);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0114         lcd_puts(String);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0115 
; 0000 0116         ADC_init();
;PCODE: $00000170 VOL: 0
; 0000 0117         limit2 = ADC_Read(2);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0118 
; 0000 0119         itoa(limit2,String);    /* Integer to string conversion */
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 011A         lcd_gotoxy(12,1);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 011B         lcd_puts(String);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 011C 
; 0000 011D         ADC_init();
;PCODE: $0000017D VOL: 0
; 0000 011E         lastMode=1;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 011F         delay_ms(150);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0120 
; 0000 0121       }
;PCODE: $00000183 VOL: 0
; 0000 0122 
; 0000 0123 
; 0000 0124       }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0125 }
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0

	.DSEG
_0xA:
	.BYTE 0x7A
