;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;//#include <avr/io.h>
;// Declare your global variables here
;
;#define F_CPU 1000000UL
;unsigned int a,b,c,high,period;
;long freq;
;char frequency[14];
;int numberOfOverFlows = 0;
;unsigned int a=0,b=0,inputCaptureData=0;
;int inputHit = 0;
;unsigned int temp = 0;
;char buff[33];
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0017 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0018 // Place your code here
; 0000 0019         PORTC.0 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001A         while(1){}
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001B         if(inputHit){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001C             numberOfOverFlows += 1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001D         }
; 0000 001E 
; 0000 001F }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;// Timer1 input capture interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 0023 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0024 // Place your code here
; 0000 0025 
; 0000 0026     PORTC.0 = 1;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0027     while(1){}
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0028 //    inputHit = (inputHit + 1)%2;
; 0000 0029 
; 0000 002A }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;void lcd_puti(int num){
; 0000 002B void lcd_puti(int num){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002C     char buff[33];
; 0000 002D     sprintf (buff, "% d",num);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;	num -> Y+33
;	buff -> Y+0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002E     lcd_gotoxy (6,1);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002F     lcd_puts (buff);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0030 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;void lcd_putf(float num){
; 0000 0031 void lcd_putf(float num){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0032     char buff[33];
; 0000 0033     sprintf (buff, "% f",num);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;	num -> Y+33
;	buff -> Y+0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0034     lcd_gotoxy (6,1);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0035     lcd_puts (buff);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0036 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;/*
;void lcd_putui(unsigned int num){
;    char buff[33];
;    ultoa( num, buff, 0 );
;    lcd_gotoxy (6,1);
;    lcd_puts (buff);
;}
;*/
;void main(void)
; 0000 0040 {
;PCODE: $00000059 VOL: 0
; 0000 0041 // Declare your local variables here
; 0000 0042 
; 0000 0043 
; 0000 0044 // Input/Output Ports initialization
; 0000 0045 // Port A initialization
; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0047 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0049 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004A 
; 0000 004B // Port B initialization
; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0050 
; 0000 0051 // Port C initialization
; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0053 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0055 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0056 
; 0000 0057 // Port D initialization
; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005C 
; 0000 005D // Timer/Counter 0 initialization
; 0000 005E // Clock source: System Clock
; 0000 005F // Clock value: Timer 0 Stopped
; 0000 0060 // Mode: Normal top=0xFF
; 0000 0061 // OC0 output: Disconnected
; 0000 0062 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0063 TCNT0=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0064 OCR0=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 1 initialization
; 0000 0067 // Clock source: System Clock
; 0000 0068 // Clock value: 1000.000 kHz
; 0000 0069 // Mode: Normal top=0xFFFF
; 0000 006A // OC1A output: Disconnected
; 0000 006B // OC1B output: Disconnected
; 0000 006C // Noise Canceler: Off
; 0000 006D // Input Capture on Falling Edge
; 0000 006E // Timer Period: 65.536 ms
; 0000 006F // Timer1 Overflow Interrupt: On
; 0000 0070 // Input Capture Interrupt: On
; 0000 0071 // Compare A Match Interrupt: Off
; 0000 0072 // Compare B Match Interrupt: Off
; 0000 0073 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0074 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0075 TCNT1H=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0076 TCNT1L=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0077 ICR1H=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0078 ICR1L=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0079 OCR1AH=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 007A OCR1AL=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007B OCR1BH=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007C OCR1BL=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007D 
; 0000 007E 
; 0000 007F // Timer/Counter 2 initialization
; 0000 0080 // Clock source: System Clock
; 0000 0081 // Clock value: Timer2 Stopped
; 0000 0082 // Mode: Normal top=0xFF
; 0000 0083 // OC2 output: Disconnected
; 0000 0084 ASSR=0<<AS2;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0085 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0086 TCNT2=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0087 OCR2=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0088 
; 0000 0089 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 008A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008B 
; 0000 008C // External Interrupt(s) initialization
; 0000 008D // INT0: Off
; 0000 008E // INT1: Off
; 0000 008F // INT2: Off
; 0000 0090 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0091 MCUCSR=(0<<ISC2);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0092 
; 0000 0093 // USART initialization
; 0000 0094 // USART disabled
; 0000 0095 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0096 
; 0000 0097 // Analog Comparator initialization
; 0000 0098 // Analog Comparator: Off
; 0000 0099 // The Analog Comparator's positive input is
; 0000 009A // connected to the AIN0 pin
; 0000 009B // The Analog Comparator's negative input is
; 0000 009C // connected to the AIN1 pin
; 0000 009D ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 009E SFIOR=(0<<ACME);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009F 
; 0000 00A0 // ADC initialization
; 0000 00A1 // ADC disabled
; 0000 00A2 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A3 
; 0000 00A4 // SPI initialization
; 0000 00A5 // SPI disabled
; 0000 00A6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A7 
; 0000 00A8 // TWI initialization
; 0000 00A9 // TWI disabled
; 0000 00AA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AB 
; 0000 00AC // Alphanumeric LCD initialization
; 0000 00AD // Connections are specified in the
; 0000 00AE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00AF // RS - PORTA Bit 0
; 0000 00B0 // RD - PORTA Bit 1
; 0000 00B1 // EN - PORTA Bit 2
; 0000 00B2 // D4 - PORTA Bit 4
; 0000 00B3 // D5 - PORTA Bit 5
; 0000 00B4 // D6 - PORTA Bit 6
; 0000 00B5 // D7 - PORTA Bit 7
; 0000 00B6 // Characters/line: 16
; 0000 00B7 lcd_init(16);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B8 while (1)
;PCODE: $000000A0 VOL: 0
; 0000 00B9       {
; 0000 00BA       // Place your code here
; 0000 00BB 
; 0000 00BC         //char buff [33];
; 0000 00BD         //delay_ms(100);
; 0000 00BE         lcd_clear();
;PCODE: $000000A1 VOL: 0
; 0000 00BF         lcd_gotoxy(0,0);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C0         lcd_puts("   BOOTING UP   ");
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C1         lcd_gotoxy(0,1);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C2         lcd_puts("    GROUP #1    ");
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C3        // delay_ms(1500);
; 0000 00C4         lcd_clear();
;PCODE: $000000B0 VOL: 0
; 0000 00C5         TCCR1B = 0x41;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00C6         while(1){
;PCODE: $000000B3 VOL: 0
; 0000 00C7             //buff=NULL;
; 0000 00C8              //    TCCR1B = 0x41;
; 0000 00C9             //unsigned int t = 5;
; 0000 00CA             //unsigned int test1 = 10;
; 0000 00CB             //lcd_clear();
; 0000 00CC             //lcd_gotoxy(2,0);
; 0000 00CD             //ltoa(((t*100)/test1),buff);
; 0000 00CE             //lcd_puts(buff);
; 0000 00CF 
; 0000 00D0             //continue;
; 0000 00D1             //numberOfOverFlows = 0;
; 0000 00D2             //inputCaptureData=0;
; 0000 00D3             lcd_gotoxy(14,0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00D4             lcd_puts("O");
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D5             inputHit = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D6             //WAIT FOR RISING EDGE T1 INT
; 0000 00D7             while((TIFR&(1<<ICF1)) == 0){}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D8             inputHit = 1;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D9             TIFR = (1<<ICF1);  //Clear ICF (Input Capture flag)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00DA 
; 0000 00DB             a = 256*ICR1H+ICR1L;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DC             //inputCaptureData=ICR1H;
; 0000 00DD             lcd_gotoxy(14,0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00DE             lcd_puts("X");
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00DF 
; 0000 00E0             //WAIT FOR RISING EDGE T1 INT
; 0000 00E1             while((TIFR&(1<<ICF1)) == 0){}
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E2             //inputHit = 0;
; 0000 00E3             TIFR = (1<<ICF1);  //Clear ICF (Input Capture flag)
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00E4             b = 256*ICR1H+ICR1L;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00E5             lcd_gotoxy(14,0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E6             lcd_puts("#");
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E7 
; 0000 00E8             //inputCaptureData=ICR1H - inputCaptureData;
; 0000 00E9             //inputCaptureData = inputCaptureData + (65536)*numberOfOverFlows;
; 0000 00EA             //numberOfOverFlows=0;
; 0000 00EB 
; 0000 00EC 
; 0000 00ED             // to clear all views
; 0000 00EE             //lcd_clear ();
; 0000 00EF 
; 0000 00F0             // to select the initial coordinates of the writing
; 0000 00F1             lcd_gotoxy (0,0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F2 
; 0000 00F3             // to display the string
; 0000 00F4             lcd_puts ("Frequency");
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00F5 
; 0000 00F6             // to select the initial coordinates of the writing
; 0000 00F7             lcd_gotoxy (0,1);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00F8 
; 0000 00F9             // to display characters
; 0000 00FA             //lcd_puts ("F (hz):");
; 0000 00FB 
; 0000 00FC             // to hold integer data to strings
; 0000 00FD             lcd_gotoxy(8,1);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00FE             lcd_puts("        ");
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00FF             //sprintf (buff, "% d",F_CPU/inputCaptureData);
; 0000 0100             lcd_gotoxy (8,1);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0101             //inputCaptureData = F_CPU;
; 0000 0102             //temp =(int)(((1000*(int)inputCaptureData))/(int)F_CPU);
; 0000 0103             //temp = (inputCaptureData*1000)/F_CPU;
; 0000 0104             //ltoa(temp,buff);
; 0000 0105             //lcd_puts(buff);
; 0000 0106             //lcd_puti(((int)(inputCaptureData)/4)*256);
; 0000 0107                      //inputCaptureData=9000000;
; 0000 0108             inputCaptureData = a - b;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0109             if(inputCaptureData < 0 )
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 010A             {
; 0000 010B                 lcd_gotoxy(10,0);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 010C                 lcd_puts("E");
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 010D                 PORTC.0 = 1;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 010E             }
; 0000 010F             lcd_gotoxy(6,1);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0110             freq =  (float)F_CPU/(float)inputCaptureData;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0111             freq = freq*1000;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0112             ftoa(inputCaptureData,2,buff);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0113             //lcd_puti(((int)inputCaptureData));
; 0000 0114 
; 0000 0115             //lcd_puti(100);
; 0000 0116             //lcd_puti(4);
; 0000 0117             lcd_puts (buff);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0118             delay_ms(500);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0119 
; 0000 011A 
; 0000 011B         }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 011C       }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 011D }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0

	.DSEG
_0x11:
	.BYTE 0x3D
