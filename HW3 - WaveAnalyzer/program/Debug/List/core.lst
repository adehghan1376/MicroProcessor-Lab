
AVRASM ver. 2.1.30  C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm Mon Oct 28 12:27:34 2019

C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R4
                 	.DEF _a_msb=R5
                 	.DEF _b=R6
                 	.DEF _b_msb=R7
                 	.DEF _c=R8
                 	.DEF _c_msb=R9
                 	.DEF _high=R10
                 	.DEF _high_msb=R11
                 	.DEF _period=R12
                 	.DEF _period_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0081 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00b4 	JMP  _timer1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00ae 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000035 2025
000036 0064
000037 2025
000038 0066      	.DB  0x25,0x20,0x64,0x0,0x25,0x20,0x66,0x0
000039 2020
00003a 4220
00003b 4f4f
00003c 4954      	.DB  0x20,0x20,0x20,0x42,0x4F,0x4F,0x54,0x49
00003d 474e
00003e 5520
00003f 2050
000040 2020      	.DB  0x4E,0x47,0x20,0x55,0x50,0x20,0x20,0x20
000041 2000
000042 2020
000043 4720
000044 4f52      	.DB  0x0,0x20,0x20,0x20,0x20,0x47,0x52,0x4F
000045 5055
000046 2320
000047 2031
000048 2020      	.DB  0x55,0x50,0x20,0x23,0x31,0x20,0x20,0x20
000049 0020
00004a 004f
00004b 0058
00004c 0023      	.DB  0x20,0x0,0x4F,0x0,0x58,0x0,0x23,0x0
00004d 7246
00004e 7165
00004f 6575
000050 636e      	.DB  0x46,0x72,0x65,0x71,0x75,0x65,0x6E,0x63
000051 0079
000052 2020
000053 2020
000054 2020      	.DB  0x79,0x0,0x20,0x20,0x20,0x20,0x20,0x20
000055 2020
000056 4500
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1147): warning: .cseg .db misalignment - padding zero byte
000057 0000      	.DB  0x20,0x20,0x0,0x45,0x0
                 _0x2000003:
000058 c080      	.DB  0x80,0xC0
                 _0x2040060:
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1151): warning: .cseg .db misalignment - padding zero byte
000059 0001      	.DB  0x1
                 _0x2040000:
00005a 4e2d
00005b 4e41
00005c 4900
00005d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\dev\workspace\proteus\EDU\micro processor lab\HW3 - WaveAnalyzer\HW3 - WaveAnalyzer - v0.04\program\Debug\List\core.asm(1154): warning: .cseg .db misalignment - padding zero byte
00005e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005f 0004      	.DW  0x04
000060 0004      	.DW  0x04
000061 0066      	.DW  __REG_VARS*2
                 
000062 0011      	.DW  0x11
000063 0160      	.DW  _0x11
000064 0072      	.DW  _0x0*2+8
                 
000065 0011      	.DW  0x11
000066 0171      	.DW  _0x11+17
000067 0083      	.DW  _0x0*2+25
                 
000068 0002      	.DW  0x02
000069 0182      	.DW  _0x11+34
00006a 0094      	.DW  _0x0*2+42
                 
00006b 0002      	.DW  0x02
00006c 0184      	.DW  _0x11+36
00006d 0096      	.DW  _0x0*2+44
                 
00006e 0002      	.DW  0x02
00006f 0186      	.DW  _0x11+38
000070 0098      	.DW  _0x0*2+46
                 
000071 000a      	.DW  0x0A
000072 0188      	.DW  _0x11+40
000073 009a      	.DW  _0x0*2+48
                 
000074 0009      	.DW  0x09
000075 0192      	.DW  _0x11+50
000076 00a4      	.DW  _0x0*2+58
                 
000077 0002      	.DW  0x02
000078 019b      	.DW  _0x11+59
000079 00ad      	.DW  _0x0*2+67
                 
00007a 0002      	.DW  0x02
00007b 01c8      	.DW  __base_y_G100
00007c 00b0      	.DW  _0x2000003*2
                 
00007d 0001      	.DW  0x01
00007e 01cf      	.DW  __seed_G102
00007f 00b2      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000080 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000081 94f8      	CLI
000082 27ee      	CLR  R30
000083 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000084 e0f1      	LDI  R31,1
000085 bffb      	OUT  GICR,R31
000086 bfeb      	OUT  GICR,R30
000087 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000088 e08d      	LDI  R24,(14-2)+1
000089 e0a2      	LDI  R26,2
00008a 27bb      	CLR  R27
                 __CLEAR_REG:
00008b 93ed      	ST   X+,R30
00008c 958a      	DEC  R24
00008d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000090 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000091 93ed      	ST   X+,R30
000092 9701      	SBIW R24,1
000093 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000094 ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000095 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000096 9185      	LPM  R24,Z+
000097 9195      	LPM  R25,Z+
000098 9700      	SBIW R24,0
000099 f061      	BREQ __GLOBAL_INI_END
00009a 91a5      	LPM  R26,Z+
00009b 91b5      	LPM  R27,Z+
00009c 9005      	LPM  R0,Z+
00009d 9015      	LPM  R1,Z+
00009e 01bf      	MOVW R22,R30
00009f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a0 9005      	LPM  R0,Z+
0000a1 920d      	ST   X+,R0
0000a2 9701      	SBIW R24,1
0000a3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a4 01fb      	MOVW R30,R22
0000a5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a6 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a7 bfed      	OUT  SPL,R30
0000a8 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000aa e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ab e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ac 940c 00b6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;//#include <avr/io.h>
                 ;// Declare your global variables here
                 ;
                 ;#define F_CPU 1000000UL
                 ;unsigned int a,b,c,high,period;
                 ;long freq;
                 ;char frequency[14];
                 ;int numberOfOverFlows = 0;
                 ;unsigned int a=0,b=0,inputCaptureData=0;
                 ;int inputHit = 0;
                 ;unsigned int temp = 0;
                 ;char buff[33];
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000ae 93ea      	ST   -Y,R30
0000af 93fa      	ST   -Y,R31
0000b0 b7ef      	IN   R30,SREG
0000b1 93ea      	ST   -Y,R30
                 ; 0000 0018 // Place your code here
                 ; 0000 0019         PORTC.0 = 1;
0000b2 9aa8      	SBI  0x15,0
                 ; 0000 001A         while(1){}
                 _0x5:
0000b3 cfff      	RJMP _0x5
                 ; 0000 001B         if(inputHit){
                 ; 0000 001C             numberOfOverFlows += 1;
                 ; 0000 001D         }
                 ; 0000 001E 
                 ; 0000 001F }
                 ; .FEND
                 ;
                 ;// Timer1 input capture interrupt service routine
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0000 0023 {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
                 ; 0000 0024 // Place your code here
                 ; 0000 0025 
                 ; 0000 0026     PORTC.0 = 1;
0000b4 9aa8      	SBI  0x15,0
                 ; 0000 0027     while(1){}
                 _0xB:
0000b5 cfff      	RJMP _0xB
                 ; 0000 0028 //    inputHit = (inputHit + 1)%2;
                 ; 0000 0029 
                 ; 0000 002A }
                 ; .FEND
                 ;void lcd_puti(int num){
                 ; 0000 002B void lcd_puti(int num){
                 ; 0000 002C     char buff[33];
                 ; 0000 002D     sprintf (buff, "% d",num);
                 ;	num -> Y+33
                 ;	buff -> Y+0
                 ; 0000 002E     lcd_gotoxy (6,1);
                 ; 0000 002F     lcd_puts (buff);
                 ; 0000 0030 }
                 ;void lcd_putf(float num){
                 ; 0000 0031 void lcd_putf(float num){
                 ; 0000 0032     char buff[33];
                 ; 0000 0033     sprintf (buff, "% f",num);
                 ;	num -> Y+33
                 ;	buff -> Y+0
                 ; 0000 0034     lcd_gotoxy (6,1);
                 ; 0000 0035     lcd_puts (buff);
                 ; 0000 0036 }
                 ;/*
                 ;void lcd_putui(unsigned int num){
                 ;    char buff[33];
                 ;    ultoa( num, buff, 0 );
                 ;    lcd_gotoxy (6,1);
                 ;    lcd_puts (buff);
                 ;}
                 ;*/
                 ;void main(void)
                 ; 0000 0040 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0041 // Declare your local variables here
                 ; 0000 0042 
                 ; 0000 0043 
                 ; 0000 0044 // Input/Output Ports initialization
                 ; 0000 0045 // Port A initialization
                 ; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0047 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbea      	OUT  0x1A,R30
                 ; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0049 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b8 bbeb      	OUT  0x1B,R30
                 ; 0000 004A 
                 ; 0000 004B // Port B initialization
                 ; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b9 bbe7      	OUT  0x17,R30
                 ; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ba bbe8      	OUT  0x18,R30
                 ; 0000 0050 
                 ; 0000 0051 // Port C initialization
                 ; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0053 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
0000bb e0e1      	LDI  R30,LOW(1)
0000bc bbe4      	OUT  0x14,R30
                 ; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0055 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000bd e0e0      	LDI  R30,LOW(0)
0000be bbe5      	OUT  0x15,R30
                 ; 0000 0056 
                 ; 0000 0057 // Port D initialization
                 ; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0059 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000bf bbe1      	OUT  0x11,R30
                 ; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000c0 bbe2      	OUT  0x12,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 0 initialization
                 ; 0000 005E // Clock source: System Clock
                 ; 0000 005F // Clock value: Timer 0 Stopped
                 ; 0000 0060 // Mode: Normal top=0xFF
                 ; 0000 0061 // OC0 output: Disconnected
                 ; 0000 0062 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000c1 bfe3      	OUT  0x33,R30
                 ; 0000 0063 TCNT0=0x00;
0000c2 bfe2      	OUT  0x32,R30
                 ; 0000 0064 OCR0=0x00;
0000c3 bfec      	OUT  0x3C,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer/Counter 1 initialization
                 ; 0000 0067 // Clock source: System Clock
                 ; 0000 0068 // Clock value: 1000.000 kHz
                 ; 0000 0069 // Mode: Normal top=0xFFFF
                 ; 0000 006A // OC1A output: Disconnected
                 ; 0000 006B // OC1B output: Disconnected
                 ; 0000 006C // Noise Canceler: Off
                 ; 0000 006D // Input Capture on Falling Edge
                 ; 0000 006E // Timer Period: 65.536 ms
                 ; 0000 006F // Timer1 Overflow Interrupt: On
                 ; 0000 0070 // Input Capture Interrupt: On
                 ; 0000 0071 // Compare A Match Interrupt: Off
                 ; 0000 0072 // Compare B Match Interrupt: Off
                 ; 0000 0073 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c4 bdef      	OUT  0x2F,R30
                 ; 0000 0074 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
0000c5 e0e1      	LDI  R30,LOW(1)
0000c6 bdee      	OUT  0x2E,R30
                 ; 0000 0075 TCNT1H=0x00;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bded      	OUT  0x2D,R30
                 ; 0000 0076 TCNT1L=0x00;
0000c9 bdec      	OUT  0x2C,R30
                 ; 0000 0077 ICR1H=0x00;
0000ca bde7      	OUT  0x27,R30
                 ; 0000 0078 ICR1L=0x00;
0000cb bde6      	OUT  0x26,R30
                 ; 0000 0079 OCR1AH=0x00;
0000cc bdeb      	OUT  0x2B,R30
                 ; 0000 007A OCR1AL=0x00;
0000cd bdea      	OUT  0x2A,R30
                 ; 0000 007B OCR1BH=0x00;
0000ce bde9      	OUT  0x29,R30
                 ; 0000 007C OCR1BL=0x00;
0000cf bde8      	OUT  0x28,R30
                 ; 0000 007D 
                 ; 0000 007E 
                 ; 0000 007F // Timer/Counter 2 initialization
                 ; 0000 0080 // Clock source: System Clock
                 ; 0000 0081 // Clock value: Timer2 Stopped
                 ; 0000 0082 // Mode: Normal top=0xFF
                 ; 0000 0083 // OC2 output: Disconnected
                 ; 0000 0084 ASSR=0<<AS2;
0000d0 bde2      	OUT  0x22,R30
                 ; 0000 0085 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000d1 bde5      	OUT  0x25,R30
                 ; 0000 0086 TCNT2=0x00;
0000d2 bde4      	OUT  0x24,R30
                 ; 0000 0087 OCR2=0x00;
0000d3 bde3      	OUT  0x23,R30
                 ; 0000 0088 
                 ; 0000 0089 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 008A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000d4 e2e4      	LDI  R30,LOW(36)
0000d5 bfe9      	OUT  0x39,R30
                 ; 0000 008B 
                 ; 0000 008C // External Interrupt(s) initialization
                 ; 0000 008D // INT0: Off
                 ; 0000 008E // INT1: Off
                 ; 0000 008F // INT2: Off
                 ; 0000 0090 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 bfe5      	OUT  0x35,R30
                 ; 0000 0091 MCUCSR=(0<<ISC2);
0000d8 bfe4      	OUT  0x34,R30
                 ; 0000 0092 
                 ; 0000 0093 // USART initialization
                 ; 0000 0094 // USART disabled
                 ; 0000 0095 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d9 b9ea      	OUT  0xA,R30
                 ; 0000 0096 
                 ; 0000 0097 // Analog Comparator initialization
                 ; 0000 0098 // Analog Comparator: Off
                 ; 0000 0099 // The Analog Comparator's positive input is
                 ; 0000 009A // connected to the AIN0 pin
                 ; 0000 009B // The Analog Comparator's negative input is
                 ; 0000 009C // connected to the AIN1 pin
                 ; 0000 009D ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000da e8e0      	LDI  R30,LOW(128)
0000db b9e8      	OUT  0x8,R30
                 ; 0000 009E SFIOR=(0<<ACME);
0000dc e0e0      	LDI  R30,LOW(0)
0000dd bfe0      	OUT  0x30,R30
                 ; 0000 009F 
                 ; 0000 00A0 // ADC initialization
                 ; 0000 00A1 // ADC disabled
                 ; 0000 00A2 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000de b9e6      	OUT  0x6,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // SPI initialization
                 ; 0000 00A5 // SPI disabled
                 ; 0000 00A6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000df b9ed      	OUT  0xD,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // TWI initialization
                 ; 0000 00A9 // TWI disabled
                 ; 0000 00AA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000e0 bfe6      	OUT  0x36,R30
                 ; 0000 00AB 
                 ; 0000 00AC // Alphanumeric LCD initialization
                 ; 0000 00AD // Connections are specified in the
                 ; 0000 00AE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00AF // RS - PORTA Bit 0
                 ; 0000 00B0 // RD - PORTA Bit 1
                 ; 0000 00B1 // EN - PORTA Bit 2
                 ; 0000 00B2 // D4 - PORTA Bit 4
                 ; 0000 00B3 // D5 - PORTA Bit 5
                 ; 0000 00B4 // D6 - PORTA Bit 6
                 ; 0000 00B5 // D7 - PORTA Bit 7
                 ; 0000 00B6 // Characters/line: 16
                 ; 0000 00B7 lcd_init(16);
0000e1 e1a0      	LDI  R26,LOW(16)
0000e2 d0fc      	RCALL _lcd_init
                 ; 0000 00B8 while (1)
                 ; 0000 00B9       {
                 ; 0000 00BA       // Place your code here
                 ; 0000 00BB 
                 ; 0000 00BC         //char buff [33];
                 ; 0000 00BD         //delay_ms(100);
                 ; 0000 00BE         lcd_clear();
0000e3 d0bc      	RCALL _lcd_clear
                 ; 0000 00BF         lcd_gotoxy(0,0);
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 940e 032f 	CALL SUBOPT_0x0
                 ; 0000 00C0         lcd_puts("   BOOTING UP   ");
                +
0000e7 e6a0     +LDI R26 , LOW ( _0x11 + ( 0 ) )
0000e8 e0b1     +LDI R27 , HIGH ( _0x11 + ( 0 ) )
                 	__POINTW2MN _0x11,0
0000e9 940e 0333 	CALL SUBOPT_0x1
                 ; 0000 00C1         lcd_gotoxy(0,1);
                 ; 0000 00C2         lcd_puts("    GROUP #1    ");
                +
0000eb e7a1     +LDI R26 , LOW ( _0x11 + ( 17 ) )
0000ec e0b1     +LDI R27 , HIGH ( _0x11 + ( 17 ) )
                 	__POINTW2MN _0x11,17
0000ed d0e0      	RCALL _lcd_puts
                 ; 0000 00C3        // delay_ms(1500);
                 ; 0000 00C4         lcd_clear();
0000ee d0b1      	RCALL _lcd_clear
                 ; 0000 00C5         TCCR1B = 0x41;
0000ef e4e1      	LDI  R30,LOW(65)
0000f0 bdee      	OUT  0x2E,R30
                 ; 0000 00C6         while(1){
                 _0x12:
                 ; 0000 00C7             //buff=NULL;
                 ; 0000 00C8              //    TCCR1B = 0x41;
                 ; 0000 00C9             //unsigned int t = 5;
                 ; 0000 00CA             //unsigned int test1 = 10;
                 ; 0000 00CB             //lcd_clear();
                 ; 0000 00CC             //lcd_gotoxy(2,0);
                 ; 0000 00CD             //ltoa(((t*100)/test1),buff);
                 ; 0000 00CE             //lcd_puts(buff);
                 ; 0000 00CF 
                 ; 0000 00D0             //continue;
                 ; 0000 00D1             //numberOfOverFlows = 0;
                 ; 0000 00D2             //inputCaptureData=0;
                 ; 0000 00D3             lcd_gotoxy(14,0);
0000f1 e0ee      	LDI  R30,LOW(14)
0000f2 940e 032f 	CALL SUBOPT_0x0
                 ; 0000 00D4             lcd_puts("O");
                +
0000f4 e8a2     +LDI R26 , LOW ( _0x11 + ( 34 ) )
0000f5 e0b1     +LDI R27 , HIGH ( _0x11 + ( 34 ) )
                 	__POINTW2MN _0x11,34
0000f6 d0d7      	RCALL _lcd_puts
                 ; 0000 00D5             inputHit = 0;
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 93e0 01a5 	STS  _inputHit,R30
0000fa 93e0 01a6 	STS  _inputHit+1,R30
                 ; 0000 00D6             //WAIT FOR RISING EDGE T1 INT
                 ; 0000 00D7             while((TIFR&(1<<ICF1)) == 0){}
                 _0x15:
0000fc b7e8      	IN   R30,0x38
0000fd ffe5      	SBRS R30,5
0000fe cffd      	RJMP _0x15
                 ; 0000 00D8             inputHit = 1;
0000ff e0e1      	LDI  R30,LOW(1)
000100 e0f0      	LDI  R31,HIGH(1)
000101 93e0 01a5 	STS  _inputHit,R30
000103 93f0 01a6 	STS  _inputHit+1,R31
                 ; 0000 00D9             TIFR = (1<<ICF1);  //Clear ICF (Input Capture flag)
000105 940e 033a 	CALL SUBOPT_0x2
                 ; 0000 00DA 
                 ; 0000 00DB             a = 256*ICR1H+ICR1L;
000107 012f      	MOVW R4,R30
                 ; 0000 00DC             //inputCaptureData=ICR1H;
                 ; 0000 00DD             lcd_gotoxy(14,0);
000108 e0ee      	LDI  R30,LOW(14)
000109 940e 032f 	CALL SUBOPT_0x0
                 ; 0000 00DE             lcd_puts("X");
                +
00010b e8a4     +LDI R26 , LOW ( _0x11 + ( 36 ) )
00010c e0b1     +LDI R27 , HIGH ( _0x11 + ( 36 ) )
                 	__POINTW2MN _0x11,36
00010d d0c0      	RCALL _lcd_puts
                 ; 0000 00DF 
                 ; 0000 00E0             //WAIT FOR RISING EDGE T1 INT
                 ; 0000 00E1             while((TIFR&(1<<ICF1)) == 0){}
                 _0x18:
00010e b7e8      	IN   R30,0x38
00010f ffe5      	SBRS R30,5
000110 cffd      	RJMP _0x18
                 ; 0000 00E2             //inputHit = 0;
                 ; 0000 00E3             TIFR = (1<<ICF1);  //Clear ICF (Input Capture flag)
000111 940e 033a 	CALL SUBOPT_0x2
                 ; 0000 00E4             b = 256*ICR1H+ICR1L;
000113 013f      	MOVW R6,R30
                 ; 0000 00E5             lcd_gotoxy(14,0);
000114 e0ee      	LDI  R30,LOW(14)
000115 940e 032f 	CALL SUBOPT_0x0
                 ; 0000 00E6             lcd_puts("#");
                +
000117 e8a6     +LDI R26 , LOW ( _0x11 + ( 38 ) )
000118 e0b1     +LDI R27 , HIGH ( _0x11 + ( 38 ) )
                 	__POINTW2MN _0x11,38
000119 d0b4      	RCALL _lcd_puts
                 ; 0000 00E7 
                 ; 0000 00E8             //inputCaptureData=ICR1H - inputCaptureData;
                 ; 0000 00E9             //inputCaptureData = inputCaptureData + (65536)*numberOfOverFlows;
                 ; 0000 00EA             //numberOfOverFlows=0;
                 ; 0000 00EB 
                 ; 0000 00EC 
                 ; 0000 00ED             // to clear all views
                 ; 0000 00EE             //lcd_clear ();
                 ; 0000 00EF 
                 ; 0000 00F0             // to select the initial coordinates of the writing
                 ; 0000 00F1             lcd_gotoxy (0,0);
00011a e0e0      	LDI  R30,LOW(0)
00011b 940e 032f 	CALL SUBOPT_0x0
                 ; 0000 00F2 
                 ; 0000 00F3             // to display the string
                 ; 0000 00F4             lcd_puts ("Frequency");
                +
00011d e8a8     +LDI R26 , LOW ( _0x11 + ( 40 ) )
00011e e0b1     +LDI R27 , HIGH ( _0x11 + ( 40 ) )
                 	__POINTW2MN _0x11,40
00011f 940e 0333 	CALL SUBOPT_0x1
                 ; 0000 00F5 
                 ; 0000 00F6             // to select the initial coordinates of the writing
                 ; 0000 00F7             lcd_gotoxy (0,1);
                 ; 0000 00F8 
                 ; 0000 00F9             // to display characters
                 ; 0000 00FA             //lcd_puts ("F (hz):");
                 ; 0000 00FB 
                 ; 0000 00FC             // to hold integer data to strings
                 ; 0000 00FD             lcd_gotoxy(8,1);
000121 e0e8      	LDI  R30,LOW(8)
000122 940e 0345 	CALL SUBOPT_0x3
                 ; 0000 00FE             lcd_puts("        ");
                +
000124 e9a2     +LDI R26 , LOW ( _0x11 + ( 50 ) )
000125 e0b1     +LDI R27 , HIGH ( _0x11 + ( 50 ) )
                 	__POINTW2MN _0x11,50
000126 d0a7      	RCALL _lcd_puts
                 ; 0000 00FF             //sprintf (buff, "% d",F_CPU/inputCaptureData);
                 ; 0000 0100             lcd_gotoxy (8,1);
000127 e0e8      	LDI  R30,LOW(8)
000128 940e 0345 	CALL SUBOPT_0x3
                 ; 0000 0101             //inputCaptureData = F_CPU;
                 ; 0000 0102             //temp =(int)(((1000*(int)inputCaptureData))/(int)F_CPU);
                 ; 0000 0103             //temp = (inputCaptureData*1000)/F_CPU;
                 ; 0000 0104             //ltoa(temp,buff);
                 ; 0000 0105             //lcd_puts(buff);
                 ; 0000 0106             //lcd_puti(((int)(inputCaptureData)/4)*256);
                 ; 0000 0107                      //inputCaptureData=9000000;
                 ; 0000 0108             inputCaptureData = a - b;
00012a 01f2      	MOVW R30,R4
00012b 19e6      	SUB  R30,R6
00012c 09f7      	SBC  R31,R7
00012d 93e0 01a3 	STS  _inputCaptureData,R30
00012f 93f0 01a4 	STS  _inputCaptureData+1,R31
                 ; 0000 0109             if(inputCaptureData < 0 )
000131 91a0 01a3 	LDS  R26,_inputCaptureData
000133 91b0 01a4 	LDS  R27,_inputCaptureData+1
                 ; 0000 010A             {
                 ; 0000 010B                 lcd_gotoxy(10,0);
                 ; 0000 010C                 lcd_puts("E");
                 ; 0000 010D                 PORTC.0 = 1;
                 ; 0000 010E             }
                 ; 0000 010F             lcd_gotoxy(6,1);
000135 e0e6      	LDI  R30,LOW(6)
000136 940e 0345 	CALL SUBOPT_0x3
                 ; 0000 0110             freq =  (float)F_CPU/(float)inputCaptureData;
000138 940e 0349 	CALL SUBOPT_0x4
                +
00013a e0a0     +LDI R26 , LOW ( 0x49742400 )
00013b e2b4     +LDI R27 , HIGH ( 0x49742400 )
00013c e784     +LDI R24 , BYTE3 ( 0x49742400 )
00013d e499     +LDI R25 , BYTE4 ( 0x49742400 )
                 	__GETD2N 0x49742400
00013e 940e 04e9 	CALL __DIVF21
000140 e9ad      	LDI  R26,LOW(_freq)
000141 e0b1      	LDI  R27,HIGH(_freq)
000142 940e 03da 	CALL __CFD1
000144 940e 0593 	CALL __PUTDP1
                 ; 0000 0111             freq = freq*1000;
000146 91e0 019d 	LDS  R30,_freq
000148 91f0 019e 	LDS  R31,_freq+1
00014a 9160 019f 	LDS  R22,_freq+2
00014c 9170 01a0 	LDS  R23,_freq+3
                +
00014e eea8     +LDI R26 , LOW ( 0x3E8 )
00014f e0b3     +LDI R27 , HIGH ( 0x3E8 )
000150 e080     +LDI R24 , BYTE3 ( 0x3E8 )
000151 e090     +LDI R25 , BYTE4 ( 0x3E8 )
                 	__GETD2N 0x3E8
000152 940e 057b 	CALL __MULD12
000154 93e0 019d 	STS  _freq,R30
000156 93f0 019e 	STS  _freq+1,R31
000158 9360 019f 	STS  _freq+2,R22
00015a 9370 01a0 	STS  _freq+3,R23
                 ; 0000 0112             ftoa(inputCaptureData,2,buff);
00015c 940e 0349 	CALL SUBOPT_0x4
00015e 940e 05a7 	CALL __PUTPARD1
000160 e0e2      	LDI  R30,LOW(2)
000161 93ea      	ST   -Y,R30
000162 eaa7      	LDI  R26,LOW(_buff)
000163 e0b1      	LDI  R27,HIGH(_buff)
000164 940e 020d 	CALL _ftoa
                 ; 0000 0113             //lcd_puti(((int)inputCaptureData));
                 ; 0000 0114 
                 ; 0000 0115             //lcd_puti(100);
                 ; 0000 0116             //lcd_puti(4);
                 ; 0000 0117             lcd_puts (buff);
000166 eaa7      	LDI  R26,LOW(_buff)
000167 e0b1      	LDI  R27,HIGH(_buff)
000168 d065      	RCALL _lcd_puts
                 ; 0000 0118             delay_ms(500);
000169 efa4      	LDI  R26,LOW(500)
00016a e0b1      	LDI  R27,HIGH(500)
00016b 940e 039b 	CALL _delay_ms
                 ; 0000 0119 
                 ; 0000 011A 
                 ; 0000 011B         }
00016d cf83      	RJMP _0x12
                 ; 0000 011C       }
                 ; 0000 011D }
                 _0x1E:
00016e cfff      	RJMP _0x1E
                 ; .FEND
                 
                 	.DSEG
                 _0x11:
000160           	.BYTE 0x3D
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00016f 93aa      	ST   -Y,R26
000170 b3eb      	IN   R30,0x1B
000171 70ef      	ANDI R30,LOW(0xF)
000172 2fae      	MOV  R26,R30
000173 81e8      	LD   R30,Y
000174 7fe0      	ANDI R30,LOW(0xF0)
000175 2bea      	OR   R30,R26
000176 bbeb      	OUT  0x1B,R30
                +
000177 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000178 958a     +DEC R24
000179 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00017a 9ada      	SBI  0x1B,2
                +
00017b e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00017c 958a     +DEC R24
00017d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00017e 98da      	CBI  0x1B,2
                +
00017f e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000180 958a     +DEC R24
000181 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000182 c088      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000183 93aa      	ST   -Y,R26
000184 81a8      	LD   R26,Y
000185 dfe9      	RCALL __lcd_write_nibble_G100
000186 81e8          ld    r30,y
000187 95e2          swap  r30
000188 83e8          st    y,r30
000189 81a8      	LD   R26,Y
00018a dfe4      	RCALL __lcd_write_nibble_G100
                +
00018b e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00018c 958a     +DEC R24
00018d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00018e c07c      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00018f 93aa      	ST   -Y,R26
000190 81e8      	LD   R30,Y
000191 e0f0      	LDI  R31,0
000192 53e8      	SUBI R30,LOW(-__base_y_G100)
000193 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000194 81e0      	LD   R30,Z
000195 81a9      	LDD  R26,Y+1
000196 0fae      	ADD  R26,R30
000197 dfeb      	RCALL __lcd_write_data
000198 81e9      	LDD  R30,Y+1
000199 93e0 01cc 	STS  __lcd_x,R30
00019b 81e8      	LD   R30,Y
00019c 93e0 01cd 	STS  __lcd_y,R30
00019e 9622      	ADIW R28,2
00019f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001a0 e0a2      	LDI  R26,LOW(2)
0001a1 940e 0352 	CALL SUBOPT_0x5
0001a3 e0ac      	LDI  R26,LOW(12)
0001a4 dfde      	RCALL __lcd_write_data
0001a5 e0a1      	LDI  R26,LOW(1)
0001a6 940e 0352 	CALL SUBOPT_0x5
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 93e0 01cd 	STS  __lcd_y,R30
0001ab 93e0 01cc 	STS  __lcd_x,R30
0001ad 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001ae 93aa      	ST   -Y,R26
0001af 81a8      	LD   R26,Y
0001b0 30aa      	CPI  R26,LOW(0xA)
0001b1 f031      	BREQ _0x2000005
0001b2 91e0 01ce 	LDS  R30,__lcd_maxx
0001b4 91a0 01cc 	LDS  R26,__lcd_x
0001b6 17ae      	CP   R26,R30
0001b7 f060      	BRLO _0x2000004
                 _0x2000005:
0001b8 e0e0      	LDI  R30,LOW(0)
0001b9 93ea      	ST   -Y,R30
0001ba 91a0 01cd 	LDS  R26,__lcd_y
0001bc 5faf      	SUBI R26,-LOW(1)
0001bd 93a0 01cd 	STS  __lcd_y,R26
0001bf dfcf      	RCALL _lcd_gotoxy
0001c0 81a8      	LD   R26,Y
0001c1 30aa      	CPI  R26,LOW(0xA)
0001c2 f409      	BRNE _0x2000007
0001c3 c047      	RJMP _0x20C0004
                 _0x2000007:
                 _0x2000004:
0001c4 91e0 01cc 	LDS  R30,__lcd_x
0001c6 5fef      	SUBI R30,-LOW(1)
0001c7 93e0 01cc 	STS  __lcd_x,R30
0001c9 9ad8      	SBI  0x1B,0
0001ca 81a8      	LD   R26,Y
0001cb dfb7      	RCALL __lcd_write_data
0001cc 98d8      	CBI  0x1B,0
0001cd c03d      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001ce 93ba      	ST   -Y,R27
0001cf 93aa      	ST   -Y,R26
0001d0 931a      	ST   -Y,R17
                 _0x2000008:
0001d1 81a9      	LDD  R26,Y+1
0001d2 81ba      	LDD  R27,Y+1+1
0001d3 91ed      	LD   R30,X+
0001d4 83a9      	STD  Y+1,R26
0001d5 83ba      	STD  Y+1+1,R27
0001d6 2f1e      	MOV  R17,R30
0001d7 30e0      	CPI  R30,0
0001d8 f019      	BREQ _0x200000A
0001d9 2fa1      	MOV  R26,R17
0001da dfd3      	RCALL _lcd_putchar
0001db cff5      	RJMP _0x2000008
                 _0x200000A:
0001dc 8118      	LDD  R17,Y+0
0001dd 9623      	ADIW R28,3
0001de 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001df 93aa      	ST   -Y,R26
0001e0 b3ea      	IN   R30,0x1A
0001e1 6fe0      	ORI  R30,LOW(0xF0)
0001e2 bbea      	OUT  0x1A,R30
0001e3 9ad2      	SBI  0x1A,2
0001e4 9ad0      	SBI  0x1A,0
0001e5 9ad1      	SBI  0x1A,1
0001e6 98da      	CBI  0x1B,2
0001e7 98d8      	CBI  0x1B,0
0001e8 98d9      	CBI  0x1B,1
0001e9 81e8      	LD   R30,Y
0001ea 93e0 01ce 	STS  __lcd_maxx,R30
0001ec 58e0      	SUBI R30,-LOW(128)
                +
0001ed 93e0 01ca+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001ef 81e8      	LD   R30,Y
0001f0 54e0      	SUBI R30,-LOW(192)
                +
0001f1 93e0 01cb+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001f3 e1a4      	LDI  R26,LOW(20)
0001f4 e0b0      	LDI  R27,0
0001f5 940e 039b 	CALL _delay_ms
0001f7 940e 0358 	CALL SUBOPT_0x6
0001f9 940e 0358 	CALL SUBOPT_0x6
0001fb 940e 0358 	CALL SUBOPT_0x6
0001fd e2a0      	LDI  R26,LOW(32)
0001fe df70      	RCALL __lcd_write_nibble_G100
                +
0001ff e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000200 958a     +DEC R24
000201 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000202 e2a8      	LDI  R26,LOW(40)
000203 df7f      	RCALL __lcd_write_data
000204 e0a4      	LDI  R26,LOW(4)
000205 df7d      	RCALL __lcd_write_data
000206 e8a5      	LDI  R26,LOW(133)
000207 df7b      	RCALL __lcd_write_data
000208 e0a6      	LDI  R26,LOW(6)
000209 df79      	RCALL __lcd_write_data
00020a df95      	RCALL _lcd_clear
                 _0x20C0004:
00020b 9621      	ADIW R28,1
00020c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00020d 93ba      	ST   -Y,R27
00020e 93aa      	ST   -Y,R26
00020f 9724      	SBIW R28,4
000210 e0e0      	LDI  R30,LOW(0)
000211 83e8      	ST   Y,R30
000212 83e9      	STD  Y+1,R30
000213 83ea      	STD  Y+2,R30
000214 e3ef      	LDI  R30,LOW(63)
000215 83eb      	STD  Y+3,R30
000216 931a      	ST   -Y,R17
000217 930a      	ST   -Y,R16
000218 85eb      	LDD  R30,Y+11
000219 85fc      	LDD  R31,Y+11+1
00021a 3fef      	CPI  R30,LOW(0xFFFF)
00021b efaf      	LDI  R26,HIGH(0xFFFF)
00021c 07fa      	CPC  R31,R26
00021d f439      	BRNE _0x204000D
00021e 940e 035f 	CALL SUBOPT_0x7
                +
000220 eba4     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
000221 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
000222 940e 02da 	CALL _strcpyf
000224 c0b1      	RJMP _0x20C0003
                 _0x204000D:
000225 3fef      	CPI  R30,LOW(0x7FFF)
000226 e7af      	LDI  R26,HIGH(0x7FFF)
000227 07fa      	CPC  R31,R26
000228 f439      	BRNE _0x204000C
000229 940e 035f 	CALL SUBOPT_0x7
                +
00022b eba5     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
00022c e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
00022d 940e 02da 	CALL _strcpyf
00022f c0a6      	RJMP _0x20C0003
                 _0x204000C:
000230 85ac      	LDD  R26,Y+12
000231 23aa      	TST  R26
000232 f462      	BRPL _0x204000F
                +
000233 85e9     +LDD R30 , Y + 9
000234 85fa     +LDD R31 , Y + 9 + 1
000235 856b     +LDD R22 , Y + 9 + 2
000236 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000237 940e 03a5 	CALL __ANEGF1
000239 940e 0364 	CALL SUBOPT_0x8
00023b 940e 0369 	CALL SUBOPT_0x9
00023d e2ed      	LDI  R30,LOW(45)
00023e 93ec      	ST   X,R30
                 _0x204000F:
00023f 85a8      	LDD  R26,Y+8
000240 30a7      	CPI  R26,LOW(0x7)
000241 f010      	BRLO _0x2040010
000242 e0e6      	LDI  R30,LOW(6)
000243 87e8      	STD  Y+8,R30
                 _0x2040010:
000244 8518      	LDD  R17,Y+8
                 _0x2040011:
000245 2fe1      	MOV  R30,R17
000246 5011      	SUBI R17,1
000247 30e0      	CPI  R30,0
000248 f039      	BREQ _0x2040013
000249 940e 0370 	CALL SUBOPT_0xA
00024b 940e 0375 	CALL SUBOPT_0xB
00024d 940e 037c 	CALL SUBOPT_0xC
00024f cff5      	RJMP _0x2040011
                 _0x2040013:
000250 940e 0381 	CALL SUBOPT_0xD
000252 940e 044b 	CALL __ADDF12
000254 940e 0364 	CALL SUBOPT_0x8
000256 e010      	LDI  R17,LOW(0)
                +
000257 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000258 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000259 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00025a e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00025b 940e 037c 	CALL SUBOPT_0xC
                 _0x2040014:
00025d 940e 0381 	CALL SUBOPT_0xD
00025f 940e 052e 	CALL __CMPF12
000261 f088      	BRLO _0x2040016
000262 940e 0370 	CALL SUBOPT_0xA
000264 940e 038a 	CALL SUBOPT_0xE
000266 940e 037c 	CALL SUBOPT_0xC
000268 5f1f      	SUBI R17,-LOW(1)
000269 3217      	CPI  R17,39
00026a f038      	BRLO _0x2040017
00026b 940e 035f 	CALL SUBOPT_0x7
                +
00026d eba9     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
00026e e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
00026f 940e 02da 	CALL _strcpyf
000271 c064      	RJMP _0x20C0003
                 _0x2040017:
000272 cfea      	RJMP _0x2040014
                 _0x2040016:
000273 3010      	CPI  R17,0
000274 f429      	BRNE _0x2040018
000275 940e 0369 	CALL SUBOPT_0x9
000277 e3e0      	LDI  R30,LOW(48)
000278 93ec      	ST   X,R30
000279 c02f      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
00027a 2fe1      	MOV  R30,R17
00027b 5011      	SUBI R17,1
00027c 30e0      	CPI  R30,0
00027d f159      	BREQ _0x204001C
00027e 940e 0370 	CALL SUBOPT_0xA
000280 940e 0375 	CALL SUBOPT_0xB
                +
000282 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000283 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000284 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000285 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000286 940e 044b 	CALL __ADDF12
000288 01df      	MOVW R26,R30
000289 01cb      	MOVW R24,R22
00028a 940e 0318 	CALL _floor
00028c 940e 037c 	CALL SUBOPT_0xC
00028e 940e 0381 	CALL SUBOPT_0xD
000290 940e 04e9 	CALL __DIVF21
000292 940e 03d8 	CALL __CFD1U
000294 2f0e      	MOV  R16,R30
000295 940e 0369 	CALL SUBOPT_0x9
000297 2fe0      	MOV  R30,R16
000298 5de0      	SUBI R30,-LOW(48)
000299 93ec      	ST   X,R30
00029a 2fe0      	MOV  R30,R16
00029b e0f0      	LDI  R31,0
00029c 940e 0370 	CALL SUBOPT_0xA
00029e 940e 0556 	CALL __CWD1
0002a0 940e 0411 	CALL __CDF1
0002a2 940e 049b 	CALL __MULF12
0002a4 940e 0391 	CALL SUBOPT_0xF
0002a6 940e 0396 	CALL SUBOPT_0x10
0002a8 cfd1      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0002a9 85e8      	LDD  R30,Y+8
0002aa 30e0      	CPI  R30,0
0002ab f131      	BREQ _0x20C0002
0002ac 940e 0369 	CALL SUBOPT_0x9
0002ae e2ee      	LDI  R30,LOW(46)
0002af 93ec      	ST   X,R30
                 _0x204001E:
0002b0 85e8      	LDD  R30,Y+8
0002b1 50e1      	SUBI R30,LOW(1)
0002b2 87e8      	STD  Y+8,R30
0002b3 5fef      	SUBI R30,-LOW(1)
0002b4 f0e9      	BREQ _0x2040020
0002b5 940e 0391 	CALL SUBOPT_0xF
0002b7 940e 038a 	CALL SUBOPT_0xE
0002b9 940e 0364 	CALL SUBOPT_0x8
                +
0002bb 85e9     +LDD R30 , Y + 9
0002bc 85fa     +LDD R31 , Y + 9 + 1
0002bd 856b     +LDD R22 , Y + 9 + 2
0002be 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0002bf 940e 03d8 	CALL __CFD1U
0002c1 2f0e      	MOV  R16,R30
0002c2 940e 0369 	CALL SUBOPT_0x9
0002c4 2fe0      	MOV  R30,R16
0002c5 5de0      	SUBI R30,-LOW(48)
0002c6 93ec      	ST   X,R30
0002c7 2fe0      	MOV  R30,R16
0002c8 e0f0      	LDI  R31,0
0002c9 940e 0391 	CALL SUBOPT_0xF
0002cb 940e 0556 	CALL __CWD1
0002cd 940e 0411 	CALL __CDF1
0002cf 940e 0396 	CALL SUBOPT_0x10
0002d1 cfde      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
0002d2 81ae      	LDD  R26,Y+6
0002d3 81bf      	LDD  R27,Y+6+1
0002d4 e0e0      	LDI  R30,LOW(0)
0002d5 93ec      	ST   X,R30
                 _0x20C0003:
0002d6 8119      	LDD  R17,Y+1
0002d7 8108      	LDD  R16,Y+0
0002d8 962d      	ADIW R28,13
0002d9 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0002da 93ba      	ST   -Y,R27
0002db 93aa      	ST   -Y,R26
0002dc 91e9          ld   r30,y+
0002dd 91f9          ld   r31,y+
0002de 91a9          ld   r26,y+
0002df 91b9          ld   r27,y+
0002e0 01cd          movw r24,r26
                 strcpyf0:
0002e1 9005      	lpm  r0,z+
0002e2 920d          st   x+,r0
0002e3 2000          tst  r0
0002e4 f7e1          brne strcpyf0
0002e5 01fc          movw r30,r24
0002e6 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0002e7 940e 05ac 	CALL __PUTPARD2
0002e9 817b         ldd  r23,y+3
0002ea 816a         ldd  r22,y+2
0002eb 81f9         ldd  r31,y+1
0002ec 81e8         ld   r30,y
0002ed fb77         bst  r23,7
0002ee 0f77         lsl  r23
0002ef fd67         sbrc r22,7
0002f0 6071         sbr  r23,1
0002f1 2f97         mov  r25,r23
0002f2 579e         subi r25,0x7e
0002f3 f081         breq __ftrunc0
0002f4 f078         brcs __ftrunc0
0002f5 3198         cpi  r25,24
0002f6 f490         brsh __ftrunc1
0002f7 27aa         clr  r26
0002f8 27bb         clr  r27
0002f9 2788         clr  r24
                 __ftrunc2:
0002fa 9408         sec
0002fb 9587         ror  r24
0002fc 95b7         ror  r27
0002fd 95a7         ror  r26
0002fe 959a         dec  r25
0002ff f7d1         brne __ftrunc2
000300 23ea         and  r30,r26
000301 23fb         and  r31,r27
000302 2368         and  r22,r24
000303 c005         rjmp __ftrunc1
                 __ftrunc0:
000304 94e8         clt
000305 2777         clr  r23
000306 27ee         clr  r30
000307 27ff         clr  r31
000308 2766         clr  r22
                 __ftrunc1:
000309 776f         cbr  r22,0x80
00030a 9576         lsr  r23
00030b f408         brcc __ftrunc3
00030c 6860         sbr  r22,0x80
                 __ftrunc3:
00030d f977         bld  r23,7
00030e 91a9         ld   r26,y+
00030f 91b9         ld   r27,y+
000310 9189         ld   r24,y+
000311 9199         ld   r25,y+
000312 17ea         cp   r30,r26
000313 07fb         cpc  r31,r27
000314 0768         cpc  r22,r24
000315 0779         cpc  r23,r25
000316 fb97         bst  r25,7
000317 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000318 940e 05ac 	CALL __PUTPARD2
00031a 940e 059d 	CALL __GETD2S0
00031c 940e 02e7 	CALL _ftrunc
00031e 940e 05a2 	CALL __PUTD1S0
000320 f419          brne __floor1
                 __floor0:
000321 940e 0598 	CALL __GETD1S0
000323 c009      	RJMP _0x20C0001
                 __floor1:
000324 f7e6          brtc __floor0
000325 940e 0598 	CALL __GETD1S0
                +
000327 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000328 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000329 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00032a e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00032b 940e 0444 	CALL __SUBF12
                 _0x20C0001:
00032d 9624      	ADIW R28,4
00032e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _freq:
00019d           	.BYTE 0x4
                 _numberOfOverFlows:
0001a1           	.BYTE 0x2
                 _inputCaptureData:
0001a3           	.BYTE 0x2
                 _inputHit:
0001a5           	.BYTE 0x2
                 _buff:
0001a7           	.BYTE 0x21
                 __base_y_G100:
0001c8           	.BYTE 0x4
                 __lcd_x:
0001cc           	.BYTE 0x1
                 __lcd_y:
0001cd           	.BYTE 0x1
                 __lcd_maxx:
0001ce           	.BYTE 0x1
                 __seed_G102:
0001cf           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00032f 93ea      	ST   -Y,R30
000330 e0a0      	LDI  R26,LOW(0)
000331 940c 018f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000333 940e 01ce 	CALL _lcd_puts
000335 e0e0      	LDI  R30,LOW(0)
000336 93ea      	ST   -Y,R30
000337 e0a1      	LDI  R26,LOW(1)
000338 940c 018f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00033a e2e0      	LDI  R30,LOW(32)
00033b bfe8      	OUT  0x38,R30
00033c b5e7      	IN   R30,0x27
00033d 2ffe      	MOV  R31,R30
00033e e0e0      	LDI  R30,0
00033f 01df      	MOVW R26,R30
000340 b5e6      	IN   R30,0x26
000341 e0f0      	LDI  R31,0
000342 0fea      	ADD  R30,R26
000343 1ffb      	ADC  R31,R27
000344 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000345 93ea      	ST   -Y,R30
000346 e0a1      	LDI  R26,LOW(1)
000347 940c 018f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000349 91e0 01a3 	LDS  R30,_inputCaptureData
00034b 91f0 01a4 	LDS  R31,_inputCaptureData+1
00034d 2766      	CLR  R22
00034e 2777      	CLR  R23
00034f 940e 0411 	CALL __CDF1
000351 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000352 940e 0183 	CALL __lcd_write_data
000354 e0a3      	LDI  R26,LOW(3)
000355 e0b0      	LDI  R27,0
000356 940c 039b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000358 e3a0      	LDI  R26,LOW(48)
000359 940e 016f 	CALL __lcd_write_nibble_G100
                +
00035b e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00035c 958a     +DEC R24
00035d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00035f 81ee      	LDD  R30,Y+6
000360 81ff      	LDD  R31,Y+6+1
000361 93fa      	ST   -Y,R31
000362 93ea      	ST   -Y,R30
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
                +
000364 87e9     +STD Y + 9 , R30
000365 87fa     +STD Y + 9 + 1 , R31
000366 876b     +STD Y + 9 + 2 , R22
000367 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
000369 81ae      	LDD  R26,Y+6
00036a 81bf      	LDD  R27,Y+6+1
00036b 9611      	ADIW R26,1
00036c 83ae      	STD  Y+6,R26
00036d 83bf      	STD  Y+6+1,R27
00036e 9711      	SBIW R26,1
00036f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
                +
000370 81aa     +LDD R26 , Y + 2
000371 81bb     +LDD R27 , Y + 2 + 1
000372 818c     +LDD R24 , Y + 2 + 2
000373 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000374 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
                +
000375 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000376 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000377 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000378 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000379 940e 049b 	CALL __MULF12
00037b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
                +
00037c 83ea     +STD Y + 2 , R30
00037d 83fb     +STD Y + 2 + 1 , R31
00037e 836c     +STD Y + 2 + 2 , R22
00037f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000380 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
                +
000381 81ea     +LDD R30 , Y + 2
000382 81fb     +LDD R31 , Y + 2 + 1
000383 816c     +LDD R22 , Y + 2 + 2
000384 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000385 85a9     +LDD R26 , Y + 9
000386 85ba     +LDD R27 , Y + 9 + 1
000387 858b     +LDD R24 , Y + 9 + 2
000388 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000389 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
00038a e0e0     +LDI R30 , LOW ( 0x41200000 )
00038b e0f0     +LDI R31 , HIGH ( 0x41200000 )
00038c e260     +LDI R22 , BYTE3 ( 0x41200000 )
00038d e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00038e 940e 049b 	CALL __MULF12
000390 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000391 85a9     +LDD R26 , Y + 9
000392 85ba     +LDD R27 , Y + 9 + 1
000393 858b     +LDD R24 , Y + 9 + 2
000394 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000395 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000396 940e 05b1 	CALL __SWAPD12
000398 940e 0444 	CALL __SUBF12
00039a cfc9      	RJMP SUBOPT_0x8
                 
                 
                 	.CSEG
                 _delay_ms:
00039b 9610      	adiw r26,0
00039c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00039d ef8a     +LDI R24 , LOW ( 0xFA )
00039e e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00039f 9701     +SBIW R24 , 1
0003a0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003a1 95a8      	wdr
0003a2 9711      	sbiw r26,1
0003a3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003a4 9508      	ret
                 
                 __ANEGF1:
0003a5 9730      	SBIW R30,0
0003a6 4060      	SBCI R22,0
0003a7 4070      	SBCI R23,0
0003a8 f009      	BREQ __ANEGF10
0003a9 5870      	SUBI R23,0x80
                 __ANEGF10:
0003aa 9508      	RET
                 
                 __ROUND_REPACK:
0003ab 2355      	TST  R21
0003ac f442      	BRPL __REPACK
0003ad 3850      	CPI  R21,0x80
0003ae f411      	BRNE __ROUND_REPACK0
0003af ffe0      	SBRS R30,0
0003b0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003b1 9631      	ADIW R30,1
0003b2 1f69      	ADC  R22,R25
0003b3 1f79      	ADC  R23,R25
0003b4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003b5 e850      	LDI  R21,0x80
0003b6 2757      	EOR  R21,R23
0003b7 f411      	BRNE __REPACK0
0003b8 935f      	PUSH R21
0003b9 c0cf      	RJMP __ZERORES
                 __REPACK0:
0003ba 3f5f      	CPI  R21,0xFF
0003bb f031      	BREQ __REPACK1
0003bc 0f66      	LSL  R22
0003bd 0c00      	LSL  R0
0003be 9557      	ROR  R21
0003bf 9567      	ROR  R22
0003c0 2f75      	MOV  R23,R21
0003c1 9508      	RET
                 __REPACK1:
0003c2 935f      	PUSH R21
0003c3 2000      	TST  R0
0003c4 f00a      	BRMI __REPACK2
0003c5 c0cf      	RJMP __MAXRES
                 __REPACK2:
0003c6 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0003c7 e850      	LDI  R21,0x80
0003c8 2e19      	MOV  R1,R25
0003c9 2215      	AND  R1,R21
0003ca 0f88      	LSL  R24
0003cb 1f99      	ROL  R25
0003cc 2795      	EOR  R25,R21
0003cd 0f55      	LSL  R21
0003ce 9587      	ROR  R24
                 
                 __UNPACK1:
0003cf e850      	LDI  R21,0x80
0003d0 2e07      	MOV  R0,R23
0003d1 2205      	AND  R0,R21
0003d2 0f66      	LSL  R22
0003d3 1f77      	ROL  R23
0003d4 2775      	EOR  R23,R21
0003d5 0f55      	LSL  R21
0003d6 9567      	ROR  R22
0003d7 9508      	RET
                 
                 __CFD1U:
0003d8 9468      	SET
0003d9 c001      	RJMP __CFD1U0
                 __CFD1:
0003da 94e8      	CLT
                 __CFD1U0:
0003db 935f      	PUSH R21
0003dc dff2      	RCALL __UNPACK1
0003dd 3870      	CPI  R23,0x80
0003de f018      	BRLO __CFD10
0003df 3f7f      	CPI  R23,0xFF
0003e0 f408      	BRCC __CFD10
0003e1 c0a7      	RJMP __ZERORES
                 __CFD10:
0003e2 e156      	LDI  R21,22
0003e3 1b57      	SUB  R21,R23
0003e4 f4aa      	BRPL __CFD11
0003e5 9551      	NEG  R21
0003e6 3058      	CPI  R21,8
0003e7 f40e      	BRTC __CFD19
0003e8 3059      	CPI  R21,9
                 __CFD19:
0003e9 f030      	BRLO __CFD17
0003ea efef      	SER  R30
0003eb efff      	SER  R31
0003ec ef6f      	SER  R22
0003ed e77f      	LDI  R23,0x7F
0003ee f977      	BLD  R23,7
0003ef c01a      	RJMP __CFD15
                 __CFD17:
0003f0 2777      	CLR  R23
0003f1 2355      	TST  R21
0003f2 f0b9      	BREQ __CFD15
                 __CFD18:
0003f3 0fee      	LSL  R30
0003f4 1fff      	ROL  R31
0003f5 1f66      	ROL  R22
0003f6 1f77      	ROL  R23
0003f7 955a      	DEC  R21
0003f8 f7d1      	BRNE __CFD18
0003f9 c010      	RJMP __CFD15
                 __CFD11:
0003fa 2777      	CLR  R23
                 __CFD12:
0003fb 3058      	CPI  R21,8
0003fc f028      	BRLO __CFD13
0003fd 2fef      	MOV  R30,R31
0003fe 2ff6      	MOV  R31,R22
0003ff 2f67      	MOV  R22,R23
000400 5058      	SUBI R21,8
000401 cff9      	RJMP __CFD12
                 __CFD13:
000402 2355      	TST  R21
000403 f031      	BREQ __CFD15
                 __CFD14:
000404 9576      	LSR  R23
000405 9567      	ROR  R22
000406 95f7      	ROR  R31
000407 95e7      	ROR  R30
000408 955a      	DEC  R21
000409 f7d1      	BRNE __CFD14
                 __CFD15:
00040a 2000      	TST  R0
00040b f40a      	BRPL __CFD16
00040c d141      	RCALL __ANEGD1
                 __CFD16:
00040d 915f      	POP  R21
00040e 9508      	RET
                 
                 __CDF1U:
00040f 9468      	SET
000410 c001      	RJMP __CDF1U0
                 __CDF1:
000411 94e8      	CLT
                 __CDF1U0:
000412 9730      	SBIW R30,0
000413 4060      	SBCI R22,0
000414 4070      	SBCI R23,0
000415 f0b1      	BREQ __CDF10
000416 2400      	CLR  R0
000417 f026      	BRTS __CDF11
000418 2377      	TST  R23
000419 f412      	BRPL __CDF11
00041a 9400      	COM  R0
00041b d132      	RCALL __ANEGD1
                 __CDF11:
00041c 2e17      	MOV  R1,R23
00041d e17e      	LDI  R23,30
00041e 2011      	TST  R1
                 __CDF12:
00041f f032      	BRMI __CDF13
000420 957a      	DEC  R23
000421 0fee      	LSL  R30
000422 1fff      	ROL  R31
000423 1f66      	ROL  R22
000424 1c11      	ROL  R1
000425 cff9      	RJMP __CDF12
                 __CDF13:
000426 2fef      	MOV  R30,R31
000427 2ff6      	MOV  R31,R22
000428 2d61      	MOV  R22,R1
000429 935f      	PUSH R21
00042a df8a      	RCALL __REPACK
00042b 915f      	POP  R21
                 __CDF10:
00042c 9508      	RET
                 
                 __SWAPACC:
00042d 934f      	PUSH R20
00042e 01af      	MOVW R20,R30
00042f 01fd      	MOVW R30,R26
000430 01da      	MOVW R26,R20
000431 01ab      	MOVW R20,R22
000432 01bc      	MOVW R22,R24
000433 01ca      	MOVW R24,R20
000434 2d40      	MOV  R20,R0
000435 2c01      	MOV  R0,R1
000436 2e14      	MOV  R1,R20
000437 914f      	POP  R20
000438 9508      	RET
                 
                 __UADD12:
000439 0fea      	ADD  R30,R26
00043a 1ffb      	ADC  R31,R27
00043b 1f68      	ADC  R22,R24
00043c 9508      	RET
                 
                 __NEGMAN1:
00043d 95e0      	COM  R30
00043e 95f0      	COM  R31
00043f 9560      	COM  R22
000440 5fef      	SUBI R30,-1
000441 4fff      	SBCI R31,-1
000442 4f6f      	SBCI R22,-1
000443 9508      	RET
                 
                 __SUBF12:
000444 935f      	PUSH R21
000445 df81      	RCALL __UNPACK
000446 3890      	CPI  R25,0x80
000447 f171      	BREQ __ADDF129
000448 e850      	LDI  R21,0x80
000449 2615      	EOR  R1,R21
                 
00044a c004      	RJMP __ADDF120
                 
                 __ADDF12:
00044b 935f      	PUSH R21
00044c df7a      	RCALL __UNPACK
00044d 3890      	CPI  R25,0x80
00044e f139      	BREQ __ADDF129
                 
                 __ADDF120:
00044f 3870      	CPI  R23,0x80
000450 f121      	BREQ __ADDF128
                 __ADDF121:
000451 2f57      	MOV  R21,R23
000452 1b59      	SUB  R21,R25
000453 f12b      	BRVS __ADDF1211
000454 f412      	BRPL __ADDF122
000455 dfd7      	RCALL __SWAPACC
000456 cffa      	RJMP __ADDF121
                 __ADDF122:
000457 3158      	CPI  R21,24
000458 f018      	BRLO __ADDF123
000459 27aa      	CLR  R26
00045a 27bb      	CLR  R27
00045b 2788      	CLR  R24
                 __ADDF123:
00045c 3058      	CPI  R21,8
00045d f028      	BRLO __ADDF124
00045e 2fab      	MOV  R26,R27
00045f 2fb8      	MOV  R27,R24
000460 2788      	CLR  R24
000461 5058      	SUBI R21,8
000462 cff9      	RJMP __ADDF123
                 __ADDF124:
000463 2355      	TST  R21
000464 f029      	BREQ __ADDF126
                 __ADDF125:
000465 9586      	LSR  R24
000466 95b7      	ROR  R27
000467 95a7      	ROR  R26
000468 955a      	DEC  R21
000469 f7d9      	BRNE __ADDF125
                 __ADDF126:
00046a 2d50      	MOV  R21,R0
00046b 2551      	EOR  R21,R1
00046c f072      	BRMI __ADDF127
00046d dfcb      	RCALL __UADD12
00046e f438      	BRCC __ADDF129
00046f 9567      	ROR  R22
000470 95f7      	ROR  R31
000471 95e7      	ROR  R30
000472 9573      	INC  R23
000473 f413      	BRVC __ADDF129
000474 c020      	RJMP __MAXRES
                 __ADDF128:
000475 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000476 df3e      	RCALL __REPACK
000477 915f      	POP  R21
000478 9508      	RET
                 __ADDF1211:
000479 f7d8      	BRCC __ADDF128
00047a cffb      	RJMP __ADDF129
                 __ADDF127:
00047b 1bea      	SUB  R30,R26
00047c 0bfb      	SBC  R31,R27
00047d 0b68      	SBC  R22,R24
00047e f051      	BREQ __ZERORES
00047f f410      	BRCC __ADDF1210
000480 9400      	COM  R0
000481 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000482 2366      	TST  R22
000483 f392      	BRMI __ADDF129
000484 0fee      	LSL  R30
000485 1fff      	ROL  R31
000486 1f66      	ROL  R22
000487 957a      	DEC  R23
000488 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000489 27ee      	CLR  R30
00048a 27ff      	CLR  R31
00048b 2766      	CLR  R22
00048c 2777      	CLR  R23
00048d 915f      	POP  R21
00048e 9508      	RET
                 
                 __MINRES:
00048f efef      	SER  R30
000490 efff      	SER  R31
000491 e76f      	LDI  R22,0x7F
000492 ef7f      	SER  R23
000493 915f      	POP  R21
000494 9508      	RET
                 
                 __MAXRES:
000495 efef      	SER  R30
000496 efff      	SER  R31
000497 e76f      	LDI  R22,0x7F
000498 e77f      	LDI  R23,0x7F
000499 915f      	POP  R21
00049a 9508      	RET
                 
                 __MULF12:
00049b 935f      	PUSH R21
00049c df2a      	RCALL __UNPACK
00049d 3870      	CPI  R23,0x80
00049e f351      	BREQ __ZERORES
00049f 3890      	CPI  R25,0x80
0004a0 f341      	BREQ __ZERORES
0004a1 2401      	EOR  R0,R1
0004a2 9408      	SEC
0004a3 1f79      	ADC  R23,R25
0004a4 f423      	BRVC __MULF124
0004a5 f31c      	BRLT __ZERORES
                 __MULF125:
0004a6 2000      	TST  R0
0004a7 f33a      	BRMI __MINRES
0004a8 cfec      	RJMP __MAXRES
                 __MULF124:
0004a9 920f      	PUSH R0
0004aa 931f      	PUSH R17
0004ab 932f      	PUSH R18
0004ac 933f      	PUSH R19
0004ad 934f      	PUSH R20
0004ae 2711      	CLR  R17
0004af 2722      	CLR  R18
0004b0 2799      	CLR  R25
0004b1 9f68      	MUL  R22,R24
0004b2 01a0      	MOVW R20,R0
0004b3 9f8f      	MUL  R24,R31
0004b4 2d30      	MOV  R19,R0
0004b5 0d41      	ADD  R20,R1
0004b6 1f59      	ADC  R21,R25
0004b7 9f6b      	MUL  R22,R27
0004b8 0d30      	ADD  R19,R0
0004b9 1d41      	ADC  R20,R1
0004ba 1f59      	ADC  R21,R25
0004bb 9f8e      	MUL  R24,R30
0004bc d027      	RCALL __MULF126
0004bd 9fbf      	MUL  R27,R31
0004be d025      	RCALL __MULF126
0004bf 9f6a      	MUL  R22,R26
0004c0 d023      	RCALL __MULF126
0004c1 9fbe      	MUL  R27,R30
0004c2 d01d      	RCALL __MULF127
0004c3 9faf      	MUL  R26,R31
0004c4 d01b      	RCALL __MULF127
0004c5 9fae      	MUL  R26,R30
0004c6 0d11      	ADD  R17,R1
0004c7 1f29      	ADC  R18,R25
0004c8 1f39      	ADC  R19,R25
0004c9 1f49      	ADC  R20,R25
0004ca 1f59      	ADC  R21,R25
0004cb 2fe3      	MOV  R30,R19
0004cc 2ff4      	MOV  R31,R20
0004cd 2f65      	MOV  R22,R21
0004ce 2f52      	MOV  R21,R18
0004cf 914f      	POP  R20
0004d0 913f      	POP  R19
0004d1 912f      	POP  R18
0004d2 911f      	POP  R17
0004d3 900f      	POP  R0
0004d4 2366      	TST  R22
0004d5 f02a      	BRMI __MULF122
0004d6 0f55      	LSL  R21
0004d7 1fee      	ROL  R30
0004d8 1fff      	ROL  R31
0004d9 1f66      	ROL  R22
0004da c002      	RJMP __MULF123
                 __MULF122:
0004db 9573      	INC  R23
0004dc f24b      	BRVS __MULF125
                 __MULF123:
0004dd decd      	RCALL __ROUND_REPACK
0004de 915f      	POP  R21
0004df 9508      	RET
                 
                 __MULF127:
0004e0 0d10      	ADD  R17,R0
0004e1 1d21      	ADC  R18,R1
0004e2 1f39      	ADC  R19,R25
0004e3 c002      	RJMP __MULF128
                 __MULF126:
0004e4 0d20      	ADD  R18,R0
0004e5 1d31      	ADC  R19,R1
                 __MULF128:
0004e6 1f49      	ADC  R20,R25
0004e7 1f59      	ADC  R21,R25
0004e8 9508      	RET
                 
                 __DIVF21:
0004e9 935f      	PUSH R21
0004ea dedc      	RCALL __UNPACK
0004eb 3870      	CPI  R23,0x80
0004ec f421      	BRNE __DIVF210
0004ed 2011      	TST  R1
                 __DIVF211:
0004ee f40a      	BRPL __DIVF219
0004ef cf9f      	RJMP __MINRES
                 __DIVF219:
0004f0 cfa4      	RJMP __MAXRES
                 __DIVF210:
0004f1 3890      	CPI  R25,0x80
0004f2 f409      	BRNE __DIVF218
                 __DIVF217:
0004f3 cf95      	RJMP __ZERORES
                 __DIVF218:
0004f4 2401      	EOR  R0,R1
0004f5 9408      	SEC
0004f6 0b97      	SBC  R25,R23
0004f7 f41b      	BRVC __DIVF216
0004f8 f3d4      	BRLT __DIVF217
0004f9 2000      	TST  R0
0004fa cff3      	RJMP __DIVF211
                 __DIVF216:
0004fb 2f79      	MOV  R23,R25
0004fc 931f      	PUSH R17
0004fd 932f      	PUSH R18
0004fe 933f      	PUSH R19
0004ff 934f      	PUSH R20
000500 2411      	CLR  R1
000501 2711      	CLR  R17
000502 2722      	CLR  R18
000503 2733      	CLR  R19
000504 2744      	CLR  R20
000505 2755      	CLR  R21
000506 e290      	LDI  R25,32
                 __DIVF212:
000507 17ae      	CP   R26,R30
000508 07bf      	CPC  R27,R31
000509 0786      	CPC  R24,R22
00050a 0741      	CPC  R20,R17
00050b f030      	BRLO __DIVF213
00050c 1bae      	SUB  R26,R30
00050d 0bbf      	SBC  R27,R31
00050e 0b86      	SBC  R24,R22
00050f 0b41      	SBC  R20,R17
000510 9408      	SEC
000511 c001      	RJMP __DIVF214
                 __DIVF213:
000512 9488      	CLC
                 __DIVF214:
000513 1f55      	ROL  R21
000514 1f22      	ROL  R18
000515 1f33      	ROL  R19
000516 1c11      	ROL  R1
000517 1faa      	ROL  R26
000518 1fbb      	ROL  R27
000519 1f88      	ROL  R24
00051a 1f44      	ROL  R20
00051b 959a      	DEC  R25
00051c f751      	BRNE __DIVF212
00051d 01f9      	MOVW R30,R18
00051e 2d61      	MOV  R22,R1
00051f 914f      	POP  R20
000520 913f      	POP  R19
000521 912f      	POP  R18
000522 911f      	POP  R17
000523 2366      	TST  R22
000524 f032      	BRMI __DIVF215
000525 0f55      	LSL  R21
000526 1fee      	ROL  R30
000527 1fff      	ROL  R31
000528 1f66      	ROL  R22
000529 957a      	DEC  R23
00052a f243      	BRVS __DIVF217
                 __DIVF215:
00052b de7f      	RCALL __ROUND_REPACK
00052c 915f      	POP  R21
00052d 9508      	RET
                 
                 __CMPF12:
00052e 2399      	TST  R25
00052f f09a      	BRMI __CMPF120
000530 2377      	TST  R23
000531 f042      	BRMI __CMPF121
000532 1797      	CP   R25,R23
000533 f048      	BRLO __CMPF122
000534 f429      	BRNE __CMPF121
000535 17ae      	CP   R26,R30
000536 07bf      	CPC  R27,R31
000537 0786      	CPC  R24,R22
000538 f020      	BRLO __CMPF122
000539 f031      	BREQ __CMPF123
                 __CMPF121:
00053a 9498      	CLZ
00053b 9488      	CLC
00053c 9508      	RET
                 __CMPF122:
00053d 9498      	CLZ
00053e 9408      	SEC
00053f 9508      	RET
                 __CMPF123:
000540 9418      	SEZ
000541 9488      	CLC
000542 9508      	RET
                 __CMPF120:
000543 2377      	TST  R23
000544 f7c2      	BRPL __CMPF122
000545 1797      	CP   R25,R23
000546 f398      	BRLO __CMPF121
000547 f7a9      	BRNE __CMPF122
000548 17ea      	CP   R30,R26
000549 07fb      	CPC  R31,R27
00054a 0768      	CPC  R22,R24
00054b f388      	BRLO __CMPF122
00054c f399      	BREQ __CMPF123
00054d cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
00054e 95f0      	COM  R31
00054f 9560      	COM  R22
000550 9570      	COM  R23
000551 95e1      	NEG  R30
000552 4fff      	SBCI R31,-1
000553 4f6f      	SBCI R22,-1
000554 4f7f      	SBCI R23,-1
000555 9508      	RET
                 
                 __CWD1:
000556 2f6f      	MOV  R22,R31
000557 0f66      	ADD  R22,R22
000558 0b66      	SBC  R22,R22
000559 2f76      	MOV  R23,R22
00055a 9508      	RET
                 
                 __MULD12U:
00055b 9f7a      	MUL  R23,R26
00055c 2d70      	MOV  R23,R0
00055d 9f6b      	MUL  R22,R27
00055e 0d70      	ADD  R23,R0
00055f 9ff8      	MUL  R31,R24
000560 0d70      	ADD  R23,R0
000561 9fe9      	MUL  R30,R25
000562 0d70      	ADD  R23,R0
000563 9f6a      	MUL  R22,R26
000564 2d60      	MOV  R22,R0
000565 0d71      	ADD  R23,R1
000566 9ffb      	MUL  R31,R27
000567 0d60      	ADD  R22,R0
000568 1d71      	ADC  R23,R1
000569 9fe8      	MUL  R30,R24
00056a 0d60      	ADD  R22,R0
00056b 1d71      	ADC  R23,R1
00056c 2788      	CLR  R24
00056d 9ffa      	MUL  R31,R26
00056e 2df0      	MOV  R31,R0
00056f 0d61      	ADD  R22,R1
000570 1f78      	ADC  R23,R24
000571 9feb      	MUL  R30,R27
000572 0df0      	ADD  R31,R0
000573 1d61      	ADC  R22,R1
000574 1f78      	ADC  R23,R24
000575 9fea      	MUL  R30,R26
000576 2de0      	MOV  R30,R0
000577 0df1      	ADD  R31,R1
000578 1f68      	ADC  R22,R24
000579 1f78      	ADC  R23,R24
00057a 9508      	RET
                 
                 __MULD12:
00057b d004      	RCALL __CHKSIGND
00057c dfde      	RCALL __MULD12U
00057d f40e      	BRTC __MULD121
00057e dfcf      	RCALL __ANEGD1
                 __MULD121:
00057f 9508      	RET
                 
                 __CHKSIGND:
000580 94e8      	CLT
000581 ff77      	SBRS R23,7
000582 c002      	RJMP __CHKSD1
000583 dfca      	RCALL __ANEGD1
000584 9468      	SET
                 __CHKSD1:
000585 ff97      	SBRS R25,7
000586 c00b      	RJMP __CHKSD2
000587 2400      	CLR  R0
000588 95a0      	COM  R26
000589 95b0      	COM  R27
00058a 9580      	COM  R24
00058b 9590      	COM  R25
00058c 9611      	ADIW R26,1
00058d 1d80      	ADC  R24,R0
00058e 1d90      	ADC  R25,R0
00058f f800      	BLD  R0,0
000590 9403      	INC  R0
000591 fa00      	BST  R0,0
                 __CHKSD2:
000592 9508      	RET
                 
                 __PUTDP1:
000593 93ed      	ST   X+,R30
000594 93fd      	ST   X+,R31
000595 936d      	ST   X+,R22
000596 937c      	ST   X,R23
000597 9508      	RET
                 
                 __GETD1S0:
000598 81e8      	LD   R30,Y
000599 81f9      	LDD  R31,Y+1
00059a 816a      	LDD  R22,Y+2
00059b 817b      	LDD  R23,Y+3
00059c 9508      	RET
                 
                 __GETD2S0:
00059d 81a8      	LD   R26,Y
00059e 81b9      	LDD  R27,Y+1
00059f 818a      	LDD  R24,Y+2
0005a0 819b      	LDD  R25,Y+3
0005a1 9508      	RET
                 
                 __PUTD1S0:
0005a2 83e8      	ST   Y,R30
0005a3 83f9      	STD  Y+1,R31
0005a4 836a      	STD  Y+2,R22
0005a5 837b      	STD  Y+3,R23
0005a6 9508      	RET
                 
                 __PUTPARD1:
0005a7 937a      	ST   -Y,R23
0005a8 936a      	ST   -Y,R22
0005a9 93fa      	ST   -Y,R31
0005aa 93ea      	ST   -Y,R30
0005ab 9508      	RET
                 
                 __PUTPARD2:
0005ac 939a      	ST   -Y,R25
0005ad 938a      	ST   -Y,R24
0005ae 93ba      	ST   -Y,R27
0005af 93aa      	ST   -Y,R26
0005b0 9508      	RET
                 
                 __SWAPD12:
0005b1 2e18      	MOV  R1,R24
0005b2 2f86      	MOV  R24,R22
0005b3 2d61      	MOV  R22,R1
0005b4 2e19      	MOV  R1,R25
0005b5 2f97      	MOV  R25,R23
0005b6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0005b7 2e1b      	MOV  R1,R27
0005b8 2fbf      	MOV  R27,R31
0005b9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0005ba 2e1a      	MOV  R1,R26
0005bb 2fae      	MOV  R26,R30
0005bc 2de1      	MOV  R30,R1
0005bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  45 r1 :  36 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   2 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  25 r18:  12 r19:  12 r20:  22 r21:  63 r22:  83 r23:  82 
r24:  67 r25:  53 r26: 117 r27:  63 r28:   7 r29:   1 r30: 242 r31:  78 
x  :  15 y  : 130 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  27 add   :  18 
adiw  :   9 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  28 brpl  :   8 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  :  90 
cbi   :   5 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  33 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :  12 
cp    :   7 cpc   :  12 cpi   :  28 cpse  :   0 dec   :  15 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   3 jmp   :  26 ld    :  24 ldd   :  53 ldi   : 145 
lds   :  12 lpm   :   8 lsl   :  12 lsr   :   3 mov   :  55 movw  :  19 
mul   :  19 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :  44 pop   :  18 push  :  18 rcall :  46 ret   :  51 
reti  :   0 rjmp  :  50 rol   :  24 ror   :  15 sbc   :   8 sbci  :  10 
sbi   :   7 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   2 sbrc  :   1 
sbrs  :   5 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  49 std   :  20 sts   :  19 sub   :   5 subi  :  17 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b7c   2766    174   2940   16384  17.9%
[.dseg] 0x000060 0x0001d3      0    115    115    1024  11.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
